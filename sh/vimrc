" vim: ts=2 sw=2:
set nocompatible              " be iMproved
set termguicolors
compiler gcc
" set makeprg=make\ 
set makeprg=gcc\ %:p\ -o\ %:p:h/bin
let $VIMPLUG = expand('$HOME') . '/.vim/plugged'
if !filereadable($HOME."/.vim/autoload/plug.vim")
  echom "Will try to download Plug.vim"
  silent call system("curl -s --head -m 1 https://github.com 1>/dev/null && curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim")
endif
" help i_ctrl-
" help map-which-keys
" currfile=%\ mainbin
" let $BROWSER = 'luakit'
" .w !bash  "exec current line 
" %s/^\(\s\)\+$//g |" clean space lines 
" exec  "!"  . @"  "exec yank buffer
" read !ls -la  "paste shell output
" g/.\{20,\}/ exec "normal gqgq" | nohls " format longer lines
" autocmd WinNew * set numberwidth=2 winheight=7

""""""""""""""""""""""""
""      Plugins:      ""
""""""""""""""""""""""""
call plug#begin()
Plug 'tpope/vim-sensible' "basic
Plug 'jlanzarotta/bufexplorer' "basic
Plug 'sheerun/vim-polyglot' "okay HUGE
Plug 'itchyny/lightline.vim' "cool
Plug 'justinmk/vim-sneak' "good!
Plug 'tpope/vim-commentary' "good
Plug 'tpope/vim-vinegar' "basic
Plug 'tpope/vim-surround' "good
Plug 'tpope/vim-endwise' "okay
Plug 'tpope/vim-repeat' "handy
Plug 'tpope/vim-eunuch' "handy
Plug 'tpope/vim-ragtag' "good
Plug 'michaeljsmith/vim-indent-object' "cool
Plug 'sandeepcr529/Buffet.vim' "good
Plug 'godlygeek/tabular' "okay
Plug 'jamessan/vim-gnupg' "good
Plug 'chrisbra/Colorizer' "good
Plug 'mileszs/ack.vim' "good
Plug 'junegunn/goyo.vim' "usable
Plug 'haya14busa/vim-edgemotion' "good
Plug 'vim-scripts/CycleColor' "works
Plug 'majutsushi/tagbar' "okay

Plug 'Shougo/unite.vim' "bloated
Plug 'Shougo/vimproc' "for unite
Plug 'kshenoy/vim-signature' "buggy
Plug 'chrisbra/SaveSigns.vim' "usable
Plug 'wesleyche/SrcExpl' "mediocre
" Plug 'tpope/vim-unimpaired'
" Plug 'eiginn/netrw' "basic
" Plug 'ZeroKnight/vim-signjump' "buggy
" Plug 'kien/rainbow_parentheses.vim'
" Plug 'ajh17/VimCompletesMe'
" Plug 'craigemery/vim-autotag' "errors
Plug 'junegunn/fzf.vim'
Plug 'junegunn/fzf'
" Plug 'vim-scripts/LustyExplorer'
" Plug 'hari-rangarajan/CCTree'
" Plug 'easymotion/vim-easymotion'
" Plug 'SirVer/ultisnips'
" Plug 'honza/vim-snippets'
" Plug 'vim-scripts/QuickBuf'
" Plug 'Yggdroot/LeaderF'
" Plug 'Shougo/denite.nvim' "not working
Plug 'roxma/nvim-yarp' "for denite
Plug 'roxma/vim-hug-neovim-rpc' "for denite
Plug 'Shougo/deoplete.nvim'
Plug 'Shougo/neoinclude.vim'
Plug 'zefei/vim-colortuner' "fun
" Plug 'tpope/vim-fugitive'
" Plug 'ryanoasis/vim-devicons' "not working
" Plug 'scrooloose/syntastic'
Plug 'dense-analysis/ale'
" Plug 'valloric/youcompleteme'

""""""""""""""""""""""""
""      Colors:       ""
""""""""""""""""""{{{}}}
" gui themes need termguicolors setting
Plug 'morhetz/gruvbox' "best
Plug 'ajmwagar/vim-dues' "soft coffee 'deus
Plug 'jpo/vim-railscasts-theme' "normal
Plug 'chriskempson/vim-tomorrow-theme' "Nice dark+light
Plug 'nanotech/jellybeans.vim' "good4html
Plug 'zsoltf/vim-maui' "darkOkay
Plug 'jedverity/feral-vim' "Nice
Plug 'mhartington/oceanic-next' "soft nice
Plug 'w0ng/vim-hybrid' "beautiful
Plug 'kristijanhusak/vim-hybrid-material' "nice Sane dark
Plug 'vim-scripts/strange' "darker 
Plug 'severij/vadelma' "white good-con
Plug 'jacoborus/tender.vim' "sane soft dark
Plug 'cocopon/iceberg.vim' "soft cold dark
Plug 'vim-scripts/desertEx' "Nice gray
Plug 'AlessandroYorba/Alduin' "brown lowcon
Plug 'jnurmine/Zenburn' "tolerable
Plug 'jonathanfilip/vim-lucius' "day morning
Plug 'mtglsk/mushroom' "night
Plug 'CruizeMissile/Revolution.vim' "cool lowcont
Plug 'romainl/Apprentice' "nostrain
Plug 'Heorhiy/VisualStudioDark.vim' "mid con
Plug 'altercation/vim-colors-solarized' "yellow
Plug 'JarrodCTaylor/spartan' " 'spartan,immortals
Plug 'jlund3/colorschemer' "semibroken 'lucid
Plug 'pbrisbin/vim-colors-off'
Plug 'jakwings/vim-colors' "'moody,garden,messy
Plug 'vim-scripts/xterm16.vim' "variable
Plug 'Drogglbecher/vim-moonscape' "NIGHT
Plug 'bf4/vim-dark_eyes' "NIGHT
Plug 'noah/fu' "sane fallback
Plug 'MPiccinato/wombat256' "good dark
Plug 'vim-scripts/peaksea' "good trad dark+light
Plug 'vim-scripts/rdark-terminal' "good darker
Plug 'juanpabloaj/vim-pixelmuerto' "dark
Plug 'Lokaltog/vim-distinguished' "dark hicon
Plug 'arzg/vim-corvine' "good warm light&dark
Plug 'trevorrjohn/vim-obsidian' "satur
Plug 'sonph/onehalf', {'rtp': 'vim'} "Nice good tone HUGE
Plug 'gilsondev/lizard' "green dark
Plug 'ajh17/Spacegray.vim' "darker misty
Plug 'sickill/vim-monokai' "dark hicon
Plug 'beigebrucewayne/Turtles' "funky
Plug 'thomd/vim-wasabi-colorscheme' "dark normalcont
Plug 'vim-scripts/sift' "underwater_fantasy
Plug 'whatyouhide/vim-gotham' "neon/green
Plug 'bcicen/vim-vice' "joke
Plug 'vim-scripts/swamplight' "day
Plug 'vim-scripts/C64.vim' "joke
Plug 'szorfein/fantasy.vim' "dull
Plug 'ErichDonGubler/vim-sublime-monokai' "edit red?
Plug 'KimNorgaard/vim-frign' "borland_style
Plug 'vim-scripts/Gummybears' "very_dark
Plug 'szorfein/fromthehell.vim' "dark satur earth
Plug 'duckwork/nirvana' "shafran
Plug 'franbach/miramare' "earth dark
Plug 'koirand/tokyo-metro.vim' "pretty dark
Plug 'nightsense/rusticated' "morning
Plug 'KKPMW/sacredforest-vim' "lowcont
Plug 'nightsense/snow' "soft)
Plug 'logico-dev/typewriter' "good!
Plug 'wimstefan/vim-artesanal' "good lowcon gray
Plug 'yuttie/inkstained-vim' "very low con light
Plug 'nightsense/stellarized' "nice! light+dark
Plug 'rdavison/Libertine' "applejuice
Plug 'AlessandroYorba/Sierra' "softgray
Plug 'AlessandroYorba/Despacio' "softdarkgrey
Plug 'Jimeno0/vim-chito' "consbroken
Plug 'HenryNewcomer/vim-theme-underflow' "consbroken
Plug 'beigebrucewayne/min_solo' "consbroken 'subtle
Plug 'therubymug/vim-pyte' "light gui
Plug 'vim-scripts/proton' "light ok 
Plug 'junegunn/seoul256.vim' "beautiful
Plug 'arzg/vim-mayanfog' "light 
Plug 'arzg/vim-plan9' "trueeeee
Plug 'lithammer/vim-eighties' "trueeeee
Plug 'sainnhe/gruvbox-material' "improved 
Plug 'arzg/vim-substrata' "cold neon
Plug 'sainnhe/edge' "good soft
Plug 'sainnhe/everforest' "cream lowcon
Plug 'sainnhe/archived-colors' "atlantis,cryslominsa,desert_night,fairy_garden,grimoire,ice_age,lost_shrine,vanilla_cake
Plug 'flrnd/plastic.vim' "juicy
Plug 'atelierbram/vim-colors_atelier-schemes' "mindfuck
Plug 'nightsense/vimspectr' " need gui
Plug 'colepeters/spacemacs-theme.vim' "cool
Plug 'stulzer/mitormk-laser' "sharp
Plug 'relastle/bluewery.vim' "low-con
Plug 'gmoe/vim-espresso' "mild
" Plug 'dfrunza/vim' "borland,muratori,pencil,vc6
" Plug 'dracula/vim' "funky
" Plug 'tomasr/molokai' "shitty
Plug 'swalladge/paper.vim' "dry white
Plug 'NLKNguyen/papercolor-theme' "soft white 'PaperColor
Plug 'markeganfuller/vim-journeyman' "pale dark
Plug 'machakann/vim-colorscheme-tatami' "fun green
" Plug 'srcery-colors/srcery-vim' "fresh-dark consbroken HUGE
Plug 'victorze/foo' " 'abyss,github-old,hacker,hyper,mr-robot
Plug 'stillwwater/vim-nebula' "cold dark
Plug 'sainnhe/sonokai' "great dark gui&nogui
Plug 'franbach/miramare' "coffee dark
Plug 'Mizux/vim-colorschemes' "better nogui pencil
Plug 'zefei/simple-dark'
Plug 'zefei/cake16' "cool medium
Plug '010penetrator/vim-colors-forplasma' "collection
" Plug 'RussellBradley/vim-knicks' "great blue 404
" Plug 'aradunovic/perun.vim' "consbroken 404
" Plug 'the31k/vim-colors-tayra' "Nice gray 404
call plug#end()

""""""""""""""""""""""""
""     Settings:      ""
""""""""""""""""""""""""
" let g:deoplete#enable_at_startup = 1
set encoding=UTF-8
set fileencodings=ucs-bom,utf-8,default,cp1251,latin1
set langmap=ФИСВУАПРШОЛДЬТЩЗЙКЫЕГМЦЧНЯ;ABCDEFGHIJKLMNOPQRSTUVWXYZ,фисвуапршолдьтщзйкыегмцчня;abcdefghijklmnopqrstuvwxyz
" set keymap=russian-jcukenwin
" set iminsert=0
" set imsearch=0
set t_Co=256
if $TERMINAL == 'xterm'
  set term=xterm-256color
endif
if $TERMINAL =~ 'kitty'
  let &t_ut=''
endif
let g:GPGPreferSymmetric=1
" vi: noswapfile bufhidden=wipe
" vim: autoindent nobackup nowritebackup noswapfile bufhidden=wipe foldmethod=indent fdo=insert fcl=all fdl=1
" set nofoldenable    " disable folding
set foldmethod=marker
let g:UltiSnipsSnippetDirectories=[$HOME."/.vim/ultisnips"]
let g:solarized_termcolors=256
let xterm16_brightness = '#aac8c2' | let xterm16_colormap='soft'
let g:seoul256_background = 234
" Check lightline themes here:
" read !ls $VIMPLUG/lightline.vim/autoload/lightline/colorscheme
" set colorcolumn=80
" augroup mysettings
" au FileType tex set wrap shiftwidth=2 softtabstop=2 expandtab
" augroup END
" Taming netrw:
  autocmd FileType netrw setl bufhidden=delete
  augroup netrw_mapping
    autocmd!
    autocmd filetype netrw call NetrwMapping()
  augroup END
  function! NetrwMapping()
    noremap <buffer> x :q<cr>
    " unmap <buffer> a
  endfunction
set noequalalways
set winheight=7
" silent !mkdir -p ~/.vimbak
silent ! find $HOME/.vim/bak -type f -mtime +30 -delete
if !isdirectory($HOME."/.vim")
  call mkdir($HOME."/.vim", "", 0770)
endif
if !isdirectory($HOME."/.vim/bak")
  call mkdir($HOME."/.vim/bak", "", 0700)
endif
set backupdir=~/.vim/bak
set undodir=~/.vim/bak
set undofile
set directory=~/.vim/bak
set swapfile
set sessionoptions+=globals
set history=2500
set tabstop=2 softtabstop=2 expandtab shiftwidth=2 smarttab 
set textwidth=0 wrapmargin=0
set smartindent
set invlinebreak
set sidescroll=12
set list lcs=tab:\┊\ 
set scrolloff=4
set number
set numberwidth=2
set showmode
set hlsearch | nohlsearch
set incsearch
set linebreak
set ignorecase
set smartcase
set magic
set matchtime=2
set switchbuf=useopen
set splitbelow
set splitright
set display=lastline
set hidden
autocmd WinNew * set numberwidth=2
autocmd FileType c setlocal commentstring=//%s
autocmd FileType cpp setlocal commentstring=//%s
autocmd FileType text setlocal commentstring=#%s
autocmd FileType cmake setlocal commentstring=#%s
set fileformat=unix
" autocmd CursorHold * normal! m'
if has('mouse')
  set mouse=a
endif
if &t_Co > 2 || has("gui_running")
  syntax on
  let c_comment_strings=1
endif
if &diff
  colo wasabi256
endif
if executable('rg')
  let g:ackprg = 'rg --vimgrep'
endif
if executable('ag')
  let g:ackprg = 'ag --vimgrep'
endif
if !exists('g:lasttab')
  let g:lasttab = 1
endif
au TabLeave * let g:lasttab = tabpagenr()

let g:SrcExpl_pluginList = [ "__Tag_List__" ] 
let g:ScrExpl_refreshTime=200
let g:SrcExpl_winHeight = 13
let g:netrw_banner = 0
let g:netrw_liststyle = 3
let g:netrw_browse_split = 4
let g:netrw_altv = 1
let g:netrw_winsize = 25
if has("cscope")
  " set cscopetag
  set csto=0
  if filereadable("cscope.out")
    cs add cscope.out  
  elseif $CSCOPE_DB != ""
    cs add $CSCOPE_DB
  endif
  set cscopeverbose  
  nmap <C-@>s :cs find s <C-R>=expand("<cword>")<CR><CR>
  nmap <C-@>g :cs find g <C-R>=expand("<cword>")<CR><CR>
  nmap <C-@>c :cs find c <C-R>=expand("<cword>")<CR><CR>
  nmap <C-@>t :cs find t <C-R>=expand("<cword>")<CR><CR>
  nmap <C-@>e :cs find e <C-R>=expand("<cword>")<CR><CR>
  nmap <C-@>f :cs find f <C-R>=expand("<cfile>")<CR><CR>
  nmap <C-@>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
  nmap <C-@>d :cs find d <C-R>=expand("<cword>")<CR><CR>
  nmap <C-@>S :scs find s <C-R>=expand("<cword>")<CR><CR>
  nmap <C-@>G :scs find g <C-R>=expand("<cword>")<CR><CR>
  nmap <C-@>C :scs find c <C-R>=expand("<cword>")<CR><CR>
  nmap <C-@>T :scs find t <C-R>=expand("<cword>")<CR><CR>
  nmap <C-@>E :scs find e <C-R>=expand("<cword>")<CR><CR>
  nmap <C-@>F :scs find f <C-R>=expand("<cfile>")<CR><CR>
  nmap <C-@>I :scs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
  nmap <C-@>D :scs find d <C-R>=expand("<cword>")<CR><CR>
endif

""""""""""""""""""""""""
""     Mappings:      ""
""""""""""""""""""{{{}}}
set timeoutlen=500
let mapleader = ","
" Go to normal mode via home-row
imap jj <ESC>
imap оо <ESC>
if v:version >= 801
  tmap oo <C-w>N:set nonumber<CR>
  tmap o<C-o>  <C-w>N :e #<CR>
  tmap <C-x> <C-w>N :BD<CR>
  tnoremap <C-PageUp> <C-w>:tabprev<CR>
  tnoremap <C-PageDown> <C-w>:tabnext<CR>
  tnoremap g<tab> <C-w>:exe "tabn ".g:lasttab<CR>
  tnoremap q<tab> <C-w>p
  tmap <C-\> <C-w>w
endif
nnoremap <C-PageUp> gT
nnoremap <C-PageDown> gt
" Preserve jumps
nnoremap <silent> { :<C-u>execute "keepjumps norm! " . v:count1 . "{"<CR>
nnoremap <silent> } :<C-u>execute "keepjumps norm! " . v:count1 . "}"<CR>
nnoremap <silent> H :<C-u>execute "keepjumps norm! " . v:count1 . "H"<CR>
nnoremap <silent> M :<C-u>execute "keepjumps norm! " . v:count1 . "M"<CR>
nnoremap <silent> L :<C-u>execute "keepjumps norm! " . v:count1 . "L"<CR>
nnoremap <silent> n :<C-u>execute "keepjumps norm! " . v:count1 . "n"<CR>
nnoremap <silent> N :<C-u>execute "keepjumps norm! " . v:count1 . "N"<CR>
nnoremap <silent> * :<C-u>execute "keepjumps norm! " . v:count1 . "*"<CR>
" nnoremap <silent> - :<C-u>execute "keepjumps norm! " . v:count1 . "H014k"<CR>
" nnoremap <silent> = :<C-u>execute "keepjumps norm! " . v:count1 . "L014j"<CR>
let key4=""
let key15=""
let scroll=82
nnoremap <silent> <Space> :exec 'normal! '.float2nr(round(winheight(0)*(exists("b:scroll") ? b:scroll : g:scroll)*0.01))."<C-d>"<CR>
" nnoremap <silent> <CR> :exec 'normal! '.float2nr(round(winheight(0)*(exists("b:scroll") ? b:scroll : g:scroll)*0.01))."<C-d>"<CR>
nnoremap <silent> <BS>    :exec 'normal! '.float2nr(round(winheight(0)*(exists("b:scroll") ? b:scroll : g:scroll)*0.01)).key15<CR>
nnoremap q<cr> <cr>
" nnoremap <silent> <tab>   :exec 'normal! '.float2nr(round(winheight(0)*(exists("b:scroll") ? b:scroll : g:scroll)*0.01)).key15<CR>
" <x> will delete to no buffer
noremap x "_x
noremap X "_X
" noremap s "_s
nnoremap gr gT
nnoremap q] gt
nnoremap q[ gT
nnoremap q{ :tabmove -1 <CR>
nnoremap q} :tabmove +1 <CR>
nnoremap q< :call MoveToPrevTab()<CR>
nnoremap q> :call MoveToNextTab()<CR>
nnoremap <Down> gj
nnoremap <Up>   gk
vnoremap <Down> gj
vnoremap <Up>   gk
inoremap <Down> <C-o>gj
inoremap <Up>   <C-o>gk
" Allows to undo accidental CTRL-U in insert mode
inoremap <C-U> <C-G>u<C-U>
map q <Nop>
map й q
" nnoremap qQ :e $MYVIMRC <CR>
nnoremap Q q
nnoremap qr @@
nnoremap qf @
" Save last insert as Macro register @l
command! -nargs=1 LastToMacro exec "let @" . <q-args> . " = \"i\" . @. . \"<Esc>\""
nnoremap q. :LastToMacro l<CR>
nnoremap qh    <C-W>h
nnoremap qj    <C-W>j
nnoremap qk    <C-W>k
nnoremap ql    <C-W>l
nnoremap <C-\> <C-W>w
nnoremap qm    <C-W>6>
nnoremap qn    <C-W>6<
nnoremap qe    <C-W>4+
nnoremap qd    <C-W>4-
nnoremap aa    <C-W>_
nnoremap az    <C-W>80-
nnoremap qa    <C-W>_<C-W>\|
nnoremap qz    <C-W>=
nnoremap aj    <C-W>w<C-W>_
nnoremap ak    <C-W>W<C-W>_
nnoremap q<tab> <C-w>p
"Add space inside brackets
nmap a<space> ysib<space><space>
nnoremap <C-W>S :vsplit<CR>
nnoremap qy :let @+ = @" <bar> :let @* = @" <CR>
nnoremap ay "+yiW
nnoremap qo o<Esc>
nnoremap qi O<Esc>
nnoremap qx :q<CR>
" Swap current and previous window
nnoremap qw :call WinSwap()<CR><C-W>p
nnoremap aw :w<CR>
nnoremap ap :put  *<CR>
nnoremap ai :put! *<CR>
nnoremap aP :put  +<CR>
nnoremap aI :put! +<CR>
" Put as single paragraph
nnoremap ao o<Esc>:put! *<CR>`[v`]:g/^$/d<CR>:nohlsearch<CR>
" Yank current file full name 
nnoremap zy :let @" = expand('%:p')
nnoremap qu ~
nnoremap qs :new  \| echo expand ('%') '.@.' getcwd() <CR>
nnoremap qv :vnew \| echo expand ('%') '.@.' getcwd() <CR>
nnoremap a<BS> :checktime <cr>
nnoremap qS :split # <cr>
nnoremap qV :vsplit # <cr>
" Split netrw
nnoremap a-   :split <bar> exec "normal -" <cr>
nnoremap a_  :vsplit <bar> exec "normal -" <cr>
" Split open file under cursor with netrw 
nnoremap ae :vsp <c-r><c-f> <CR>
nnoremap aE :e <c-r><c-f> <CR>
" Split open current location with netrw
nnoremap a, :wincmd s \| e %:p:h <CR>
nnoremap a. :wincmd v \| e %:p:h <CR>
nnoremap a<tab> :wincmd p \| e %:p:h <CR>
nnoremap as :  new \| lcd #:p:h \| echo expand ('%') '.@.' getcwd() <CR>
nnoremap av : vnew \| lcd #:p:h \| echo expand ('%') '.@.' getcwd() <CR>
nnoremap an :tabe %:p:h <CR>
" Open current location with vifm within vim
nnoremap ac :terminal ++close bash -c "INVIM=1 vifm %:p:h"<CR>
nnoremap aC :vertical terminal ++close bash -c "INVIM=1 vifm %:p:h"<CR>
nnoremap a; :terminal ++kill=term ++curwin ++close bash -c "INVIM=1 vifm %:p:h"<CR>
nnoremap a: :tabe \| terminal ++kill=term ++curwin bash -c "INVIM=1 vifm #:p:h"<CR>
nnoremap a/ :nohlsearch <CR>
" nnoremap a/ :set hlsearch! <CR>
" Jump last edit edges
nnoremap [e `[
nnoremap ]e `]
" Select last changed/yanked text
nnoremap [] `[v`]
" Jump last selection edges
nnoremap [v `<
nnoremap ]v `>
nnoremap q<Up>   :cprev<CR>
nnoremap q<Down> :cnext<CR>
nnoremap q<Space> :echo expand ('%') '.@.' getcwd() <CR>
nnoremap q<BS> :enew <CR>
nnoremap q; :<up>
vnoremap q; :<up>
nnoremap qq :
nnoremap dx 0"_D
nnoremap dy ^"_D
nnoremap dc "_d$
nnoremap d<space> :call DelSpace()<Esc>
nnoremap d. "_dd
nnoremap cm O<Esc>o
" Edit new line after current paragraph
nnoremap c<CR> }:if (line(".") == line("$")) \| exec "normal o" \| endif<CR>O
" Yank inline
nnoremap yc ^y$"+y$"*y$
" Eval yanked
nnoremap yq :@"<CR>
nnoremap cp "_diw""P
nnoremap co "_diw"*P
noremap <c-n> 12<c-e>
noremap <c-p> 12<c-y>
map <c-j> <Plug>(edgemotion-j)
map <c-k> <Plug>(edgemotion-k)
" for vim-signature
nmap [a ['
nmap ]a ]'
nmap ]s ]-
nmap [s [-
nnoremap m-       :<C-U>call signature#mark#Purge("all")<CR>
nnoremap m<space> :<C-U>call signature#mark#Purge("line")<CR>
nnoremap gz 1gt
" nnoremap <Leader>s :call WinSwap()<CR>
nnoremap <Leader>y :call BufYank()<CR>
nnoremap <Leader>p :call BufPut()<CR>
" Go to text start/finish in file
nnoremap g<PageUp>   gg:call search('^.') <CR>k
nnoremap g<PageDown> G$:call search('^.','b') <CR>0j
" Search my comments
nnoremap am /\s*\/\/.*\/\/$<CR>
" Jump to blank or one-char lines
nnoremap <silent> gn :call search('^\(.\\|\(\s\)*\)$','W') <CR>
nnoremap <silent> gp :call search('^\(.\\|\(\s\)*\)$','bW') <CR>
nnoremap <silent> gy :call search('^\(.\\|\(\s\)*\)$','bW') <CR>
onoremap <silent> gn :call search('^\(.\\|\(\s\)*\)$','W') <CR>
onoremap <silent> gp :call search('^\(.\\|\(\s\)*\)$','bW') <CR>
onoremap <silent> gy :call search('^\(.\\|\(\s\)*\)$','bW') <CR>
" nnoremap <silent> aj :call search('.','W') <CR>
" nnoremap <silent> ak :call search('.','bW') <CR>
" nnoremap q<CR> 
" nnoremap q\ 
" nnoremap z' `
nnoremap ze :call SwitchCE()<CR>
nnoremap z; :set wrap!<CR>
nmap <C-c> <C-y>
noremap <C-e> 5<C-e>
noremap <C-y> 5<C-y>
nnoremap ]l :lnext<cr>
nnoremap [l :lprev<cr>
nmap s <Plug>Sneak_s
nmap S <Plug>Sneak_S
nnoremap cx s
nnoremap c<Space> c$
cnoremap <C-a> <Home>
cnoremap <C-b> <C-Left>
cnoremap <C-t> <C-Right>
nnoremap a <Nop>
map ф a
nnoremap ad a
nnoremap at :tabe<CR>
nnoremap aT :-tabe<CR>
nnoremap q- 60A-<esc>0<esc>60ld$b
nnoremap q= 60A=<esc>0<esc>60ld$b
" nmap q- O1<esc>gcc$xj^d0o<esc>0d$60i-<esc>kkJJ^60ldc0W
nnoremap af :exec "normal i".nr2char(getchar())."\e"<CR>
nnoremap ag :exec "normal ad".nr2char(getchar())."\e"<CR>
nnoremap q1 1gt
nnoremap q2 2gt
nnoremap q3 3gt
nnoremap q4 4gt
nnoremap q5 5gt
nnoremap q6 6gt
nnoremap q7 7gt
nnoremap q8 8gt
nnoremap q9 9gt
nnoremap <Leader>q :qa <CR>
nnoremap <Leader>j :Unite buffer file<CR>
nnoremap <Leader>l :Unite buffer file<CR>i
nnoremap <Leader>k :Denite buffer -mode=normal -immediately-1<CR>
nnoremap <Leader>e :BufExplorer <CR>
" Split open terminal at current location
nnoremap ab : new \| if isdirectory(expand('#:p:h')) \| lcd #:p:h \| endif \| terminal ++kill=term ++curwin ++norestore <CR>
nnoremap aB : vnew \| if isdirectory(expand('#:p:h')) \| lcd #:p:h \| endif \| terminal ++kill=term ++curwin ++norestore <CR>
" Open terminal at current location
nnoremap qb : if isdirectory(expand('%:p:h')) \| lcd %:p:h \| endif \| terminal ++kill=term ++curwin ++norestore <CR>
" Show shell
nnoremap qt :Bash <CR>
" Jump to already existing terminal window inside vim
nnoremap qg :call GotoTerm(0)<CR>
" Spawn a terminal outside vim
nnoremap <Leader>t :NewTermHere<CR>
" Select previous tab
nnoremap g<tab> :exe "tabn ".g:lasttab<CR>
nnoremap <Leader>. <C-^>
nnoremap <Leader>x :q<CR>
nnoremap <Leader>w :w<CR>
nnoremap <Leader>d :bd!<CR>
nnoremap <Leader>c :NewVifmHere<CR>
nnoremap <Leader>C :Silent xdg-open %:p:h & <cr>
" swap two chars
nnoremap gx dlp
nnoremap <Leader><Space> :LCDhere <CR>
" nnoremap <Leader>G :call ClimbToDirWhere(".git/index",1) \| pwd <CR>
nnoremap <Leader>o :Goyo 66%x100%<CR>
nnoremap <Leader>n :Vexplore<CR>
nnoremap <Leader>m ^y$:call system('xdg-open ' . "'" . @" . "' &")<CR>
nnoremap <Leader>M ^y$:call system('chromium ' . "'" . @" . "' &")<CR>
nnoremap <Leader>gw yiw:call system('google.sh ' . "'" . @" . "'")<CR>
nnoremap <Leader>gy ^y$:call system('yandex.sh ' . "'" . @" . "'")<CR>
" nnoremap <Leader>gr ^y$:silent exec " !source $HOME/.bashrc && chromium \"red " . @" . "\" &>/dev/null & " \| redraw!<CR>
nnoremap <Leader>gg :call FocusBufOrDo('wawe','e /ln/ho/moment/4gist/wawe')<CR>
nnoremap <Leader>gq :call FocusBufOrDo('.vimrc','e $MYVIMRC')<CR>
nnoremap <Leader>gb :call FocusBufOrDo('.bashrc$','e $HOME/.bashrc')<CR>
nnoremap <Leader>gx :call FocusBufOrDo('sxhkd','e /ln/sh/sxhkdrc')<CR>
nnoremap <Leader>gk :call FocusBufOrDo('kitty.conf','e /ln/sh/kitty.conf')<CR>
nnoremap <Leader>gm :call FocusBufOrDo('material','e $tt/material')<CR>
nnoremap <Leader>gz :call FocusBufOrDo('zzzz','e $tt/zzzzzz')<CR>
nnoremap <Leader>gu :call FocusBufOrDo('ff','e $tt/u*/ff*')<CR>
nnoremap <Leader>gh :call FocusBufOrDo('sh_history','e $HOME/.bash_history')<CR>G
nnoremap <Leader>gl :call FocusBufOrDo('1linux','e /ln/sh/1linux')<CR>
nnoremap <Leader>gs :call FocusBufOrDo('stk','e /ln/ho/use/stk.tx')<CR>
nnoremap <Leader>gd :BD<CR>
nnoremap <Leader>vo ^y$:call system('google.sh ' . "'" . @" . "'")<CR>
" binding for vimz bash script; i e move current buf to vimserver's vim
nnoremap <Leader>vn :silent exec '! ( sleep 0 ; MODE=newtab vimz "%:p" ) & ' \| redraw! \| q <CR>
nnoremap <Leader>v<space> :silent exec '! ( sleep 0 ; MODE=current vimz "%:p" ) & ' \| redraw! \| q <CR>
nnoremap <Leader>va :silent exec '! ( sleep 0 ; vimz "%:p" ) & ' \| redraw! \| q <CR>
" Add Plug entry
nnoremap <Leader>vp :put + <bar> exec "normal dfmxIPlug 'A'" <CR>
nnoremap <Leader>vs :source ~/.vim/session.vim \| call LoadColor() \| call MySigns()<CR>
nnoremap <Leader>zs :wa\|SessWrite<CR>
nnoremap <Leader>vv :source $MYVIMRC <CR>
nnoremap <Leader>vq :qa! <CR>
nnoremap <Leader>vw :wa<CR>
nnoremap <Leader>v<Leader> :call EvalThis()<CR>
nnoremap <Leader>vf :set filetype=sh<CR>
nnoremap <Leader>vb :call SwitchBackground() <CR>:echo "background=" &background <cr>
nnoremap <Leader>vg :set termguicolors! <cr>:set termguicolors? <cr>
nnoremap <Leader>vt :TagbarOpen fj <CR>
" nnoremap <Leader>.. :silent exec 'UpdCtags' \| redraw! \| echo 'Wrote tags db in' getcwd().'/' <CR>
" nnoremap <Leader>.. :call UpdCtagsHereDeps() <CR>
" nnoremap <Leader>.. :call UpdCtagsGitDeps() <CR>
" nnoremap <Leader>.. :call UpdCtagsGit() <CR>
nnoremap <Leader>za :Ack <C-r><C-w> %:p:h 
nnoremap <Leader>zg :call ClimbToDirWhere(".git/index",1) \| Ack -Q <C-R><C-W> 
nnoremap <Leader>zf :call ClimbToDirWhere("Makefile",1) \| Ack -Q <C-R><C-W> 
" nnoremap <Leader>ff :AckFile <C-r><C-W> <CR>
nnoremap <Leader>zw :AckWindow <C-r><C-w> <CR>
nnoremap <Leader>zz :let &scrolloff=28-&scrolloff<CR>
nnoremap <Leader>zo :make <bar> copen <CR>
nnoremap <Leader>zm :lcd %:p:h <bar> silent call BuildProjectUni("Makefile","make") <bar> redraw! <bar> cwindow <CR>
nnoremap <Leader>zt :lcd %:p:h <bar> silent call BuildProjectUni("Makefile","make tags") <bar> redraw! <bar> cwindow <CR>
nnoremap <Leader>zx :lcd %:p:h <bar> silent call BuildProjectUni("Makefile","make clean") <bar> redraw! <bar> cwindow<CR>
nnoremap <Leader>zr :lcd %:p:h <bar> silent call BuildProjectUni("Makefile","make run") <bar> redraw! <bar> cwindow <CR>
" nnoremap <Leader>zb yap: exec "!" . @" <cr>
nnoremap <Leader>zl : silent exec '! echo -e "\n$(pwd):"; ls -la . ; echo \. ; ls -la %:p ; read -n 1 -s -r -p "//hit.anykey" ; echo -ne "\n" ' \| redraw! <cr>
vnoremap z- <ESC>:call FoldSelected()<CR>za

""""""""""""""""""""""""
""     Commands:      ""
""""""""""""""""""""""""
command! -nargs=1 Silent exec 'silent !' . <q-args> | exec 'redraw!'
"Usage : Silent ls; read -rsn1 -p "//hit.anykey"; echo;
command! DiffOrig vert new | set bt=nofile | r # | 0d_ | diffthis
          \ | wincmd p | diffthis
" Sum lines of numbers in range
command! -range Sum :echo eval(substitute(join(getline(<line1>,<line2>),'+'),',','.',"g"))
command! SuW w !sudo tee %
command! SuE r !sudo cat %
command! KIR e ++enc=cp1251 | set fileencoding=utf-8 | set fileformat=unix
" command! C1KIR e ++enc=cp1251 | set fileencoding=utf-8 | set fileformat=unix | wq
command! F set fileencoding=utf-8 | set fileformat=unix
command! SessWrite let g:Color_save=g:colors_name | let g:Color_backgr=&background | let g:Line_save=g:lightline.colorscheme | call TerminalsFuneral() | mksession! ~/.vim/session.vim | SaveSigns! ~/.vim/signs.sav
command! QQ  exec 'SessWrite' | wa | qa
command! Bash exec 'silent ! bash' | redraw!
command! NewTerm exec 'silent ! $TERMINAL &' | redraw!
command! NewTermHere exec 'silent ! cd "%:p:h" && $TERMINAL &' | redraw!
command! NewVifmHere exec 'silent ! $TERMINAL -e vifm %:p:h & ' | redraw!
command! LCDhere lcd %:p:h | pwd
command! FollowSymLink let b:symlink = expand("%:p") | execute "file " . resolve(expand("%")) | edit
command! UnFollowSymLink exec 'file ' . b:symlink | edit
command! UpdCtags !ctags -R --exclude=.git --exclude=log --exclude=wutils --c++-kinds=+p --fields=+iaS --extra=+q *
command! UpdCtagsSudo !sudo ctags -R --exclude=.git --exclude=log --exclude=wutils --c++-kinds=+p --fields=+iaS --extra=+q *
command! Yall %y "
command! Dall %d _
command! Call %d _ | put!
command! SwapContentPrevWin :call SwapContentPrevWin()
command! Fdel :silent exec '!rm %' | redraw! | bd
command! -nargs=? LineColor call LightlineReload('<args>')

""""""""""""""""""""""""
""     MS_stuff:      ""
""""""""""""""""""""""""
if !empty($WINDIR)
" If windows
  " set makeprg=\./make.bat
  " set makeprg=\./make.bat\ -j4\ DEBUG=1
  " nnoremap qp :put + <CR>j
    command! RCbash :exec '!source /c/Users/user/.bashrc'
    command! NewTerm exec 'silent ! mintty.exe &' | redraw!
    command! UpdCtags !ctags.exe -R --exclude=.git --exclude=log --exclude=wutils --c++-kinds=+p --fields=+iaS --extra=+q *
  command! Chrome :silent exec '!source /c/Users/user/.bashrc && chrome "%"' | redraw!
  command! Npp :silent exec '!source /c/Users/user/.bashrc && npp "%"' | redraw!
  command! XYp :silent exec '!source /c/Users/user/.bashrc && exp "%:p:h" &' | redraw!
endif

""""""""""""""""""""""""
""       Menus:       ""
""""""""""""""""""""""""
set wildmenu
set wcm=<tab>
map <Leader><tab> :emenu tagi.<tab>
" menu tagi.ru :setlocal spell spelllang=ru <CR>
menu tagi.basic   :silent exec 'UpdCtags' \| redraw! \| echo 'Wrote tags db in' getcwd().'/' <CR>
menu tagi.dirDeps :call UpdCtagsDirDeps() <CR>
menu tagi.gitDeps :call UpdCtagsGitDeps() <CR>
menu tagi.git     :call UpdCtagsGit() <CR>

""""""""""""""""""""""""
""      Macros:       ""
""""""""""""""""""""""""
let @g = ",gggg2zjjzzao:call DoOnKey(\"103\",\"b #\")\n"
let @s = "i \<Esc>ll."

""""""""""""""""""""""""
""     Functions:     ""
""""""""""""""""""""""""
function! UpdCtagsDirDeps()
  echom "Trying to update ctags with deps in this directory"
  silent exec '! echo -e "\n\n"Trying to update ctags with deps in this directory"..."'
  exec '! $sh/ctags_with_deps.sh $(find . -type f -name \*.[ch])'
endfunction

function! UpdCtagsGitDeps()
  echom "Trying to update ctags with deps in this git project"
  silent exec '! echo -e "\n\n"Trying to update ctags with deps in this git project"..."'
  let l:starting_directory = getcwd()
  let l:curr_directory = expand('%:p:h')
  exec "cd " . l:curr_directory
  let l:proj_dir = ClimbToDirWhere(".git/index",1)
  if ( l:proj_dir != "-1" )
    silent exec '! echo Found .git in $PWD/'
    " exec '!ctags -R --exclude=.git --exclude=log --exclude=wutils --c++-kinds=+p --fields=+iaS --extra=+q *'
    exec '! $sh/ctags_with_deps.sh $(find . -type f -name \*.[ch])'
  else
    echom "Cant find .git"
  endif
  exec "cd " . l:starting_directory
endfunction

function! UpdCtagsGit()
  echom "Trying to update ctags in this git project"
  silent exec '! echo -e "\n\n"Trying to update ctags in this git project"..."'
  let l:starting_directory = getcwd()
  let l:curr_directory = expand('%:p:h')
  exec "cd " . l:curr_directory
  let l:proj_dir = ClimbToDirWhere(".git/index",1)
  if ( l:proj_dir != "-1" )
    silent exec '! echo Found .git in $PWD/'
    exec '!ctags -R --exclude=.git --exclude=log --exclude=wutils --c++-kinds=+p --fields=+iaS --extra=+q *'
  else
    echom "Cant find .git"
  endif
  exec "cd " . l:starting_directory
endfunction

function! BuildProject1()
  let l:starting_directory = getcwd()
  let l:curr_directory = expand('%:p:h')
  exec "cd " . l:curr_directory
  exec '!echo -e "\n"============ $(date) ============"\n"@ $PWD'
  make 
  exec '!echo -e "==Done build==\n"'
  exec "cd " . l:starting_directory
endfunction

" function! MakeClean()
"   silent exec '!echo -e "\n=-=-=-=-=-=-=-=-=-=-=-=-=-="'
"   silent exec "!make clean"
"   redraw!
" endfunction

function! BuildProjectUni(Makefile,Makecommand)
  " exec "!echo " . a:Makecommand . ":"
  " memorize stuff
  let l:makeprg_bak = &makeprg
  let &makeprg = a:Makecommand
  let l:starting_directory = getcwd()
  let l:curr_directory = expand('%:p:h')
  " change directory
  exec "lcd " . l:curr_directory
  let l:proj_dir = ClimbToDirWhere(a:Makefile,1)
  " " !!! ignore cmake-generated Makefile
  while filereadable("vim_make_ignore")
    cd ../
    let l:proj_dir = ClimbToDirWhere(a:Makefile,1)
  endwhile
  if ( l:proj_dir != "-1" )
    exec "!echo " . a:Makecommand . " @ " . l:proj_dir . ":"
    exec "!echo ------------------------------------------------"
    make
    " exec '! ' . a:Makecommand
  else 
    exec '! echo Makefile not found'
  endif
  Silent read -n 1 -s -r -p "//hit.anykey" ; echo -ne "\n\n"
  " reset stuff
  exec "lcd " . l:starting_directory
  let &makeprg = l:makeprg_bak
endfunction

function! ClimbToDirWhere(filename,chdir)
  let l:init_dir = getcwd()
  while 1
    " check if the file exist in the current directory
    if filereadable(a:filename)
      let l:result = getcwd()
      " change directory if chdir==1
      if a:chdir !=# 1
        exec "lcd " . l:init_dir
      endif
      return l:result
    elseif getcwd() ==# "/" || getcwd() =~# '^[^/]..$'
      "if we've hit the top level directory, break out
      exec "lcd " . l:init_dir
      return -1
    else
      lcd ..
    endif
  endwhile
endfunction

function! FocusBufOrDo(name,cmd)
  if buflisted(bufname(a:name))
    call GotoWindowByName(a:name)
    if bufname('%') != bufname(a:name)
      exec 'buffer ' . a:name
    endif
  elseif !empty(a:cmd)
    " echo 'No such buffer'
    exec a:cmd
  endif 
endfunc

function! GotoWindowByName(name)
  for b in getbufinfo()
    if b.name =~ a:name && !empty(b.windows)
      call win_gotoid(b.windows[0])
      return
    endif
  endfor
endfunction

function! GotoTerm(arg)
  let cur = getbufinfo(expand('%'))[0].windows[0]
  let ar = []
  for b in getbufinfo()
    if b.name =~ '/bin/bash' && !empty(b.windows)
      let ar = ar + [b.windows[0]]
    endif
  endfor
  if len(ar) == 0
    " Should I create new window?
    if a:arg == 1
      wincmd n
    endif
    call FocusBufOrDo('/bin/bash','echo "No terminal found."')
    " call FocusBufOrDo('/bin/bash','echo "A new terminal!" | terminal ++curwin ++norestore')
    return
  endif
  " if ( exists("g:lasttermid") && (index(ar,cur)<0) )
  "   " echo 'remem' g:lasttermid
  "   call win_gotoid(g:lasttermid)
  "   return
  " endif
  call win_gotoid(ar[(1+index(ar,cur)) % len(ar)])
  " let g:lasttermid = getbufinfo(expand('%'))[0].windows[0]
endfunction

function! TerminalsFuneral()
  let bufmap = map(range(1, bufnr('$')), '[getbufvar((v:val), "&buftype"), v:val]')
  " echo bufmap
  let targ = filter(bufmap, 'v:val[0] =~ "terminal"')
  " echo targ
  for el in targ
    " echo el[1]
    " call term_setrestore(el[1],"++kill=term")
    call term_setkill(el[1],"term")
  endfor
endfunction

" echo map(range(1, bufnr('$')), '[bufname(v:val), v:val]')

" function! RevealBufs(arg)
"   let ar = []
"   for b in getbufinfo()
"     if b.name =~ a:arg && empty(b.windows) && b.loaded == 1
"       let a = b.bufnr
"       " echo b.bufnr
"       exec "sb" . (b.bufnr)
"     endif
"   endfor
" endfunction

function! MoveToPrevTab()
  "there is only one window
  if tabpagenr('$') == 1 && winnr('$') == 1
    return
  endif
  "preparing new window
  let l:tab_nr = tabpagenr('$')
  let l:cur_buf = bufnr('%')
  if tabpagenr() != 1
    close!
    if l:tab_nr == tabpagenr('$')
      tabprev
    endif
    sp
  else
    close!
    exe "0tabnew"
  endif
  "opening current buffer in new window
  exe "b".l:cur_buf
endfunc

function! MoveToNextTab()
  "there is only one window
  if tabpagenr('$') == 1 && winnr('$') == 1
    return
  endif
  "preparing new window
  let l:tab_nr = tabpagenr('$')
  let l:cur_buf = bufnr('%')
  if tabpagenr() < tab_nr
    close!
    if l:tab_nr == tabpagenr('$')
      tabnext
    endif
    sp
  else
    close!
    tabnew
  endif
  "opening current buffer in new window
  exe "b".l:cur_buf
endfunc

function! SwapContentPrevWin()
  let lines1 = getline(1, '$')
  exe 'wincmd p'
  let lines2 = getline(1, '$')
  exe '%d_'
  $put=lines1
  normal ggdd
  exe 'wincmd p'
  exe '%d_'
  $put=lines2
  normal ggdd
endfunction

function! BufYank()
  let g:bufnra = bufnr("%")
endfunction

function! BufPut()
  exec "b" . g:bufnra
endfunction

function! WinSwap()
  let thiswin = winnr()
  let thisbuf = bufnr("%")
  let lastwin = winnr("#")
  let lastbuf = winbufnr(lastwin)
  exec  lastwin . " wincmd w" ."|".
        \ "buffer ". thisbuf ."|".
        \ thiswin ." wincmd w" ."|".
        \ "buffer ". lastbuf
endfunction

function! SwitchBackground()
  " echo '121243234'
  if (&background == "light")
    exec "set background=dark"
  else
    exec "set background=light"
  endif
  " exec "set background"
  " echo &background
endfunction

function! LoadColor()
  if exists( "g:Color_save" )
    exec "colo " . g:Color_save
  endif
  if exists( "g:Color_backgr" )
    exec "set background=" . g:Color_backgr
  endif
  if exists( "g:Line_save" )
    exec "LineColor " . g:Line_save
  endif
endfunction

function! SwitchCE()
  if mapcheck("<C-e>") == ""
    noremap <C-e> 5<C-e>
    noremap <C-y> 5<C-y>
  else
    unmap <C-e>
    try
      unmap <C-y>
    endtry
  endif
endfunc

function! LightlineReload(arg)
  if a:arg != ""
    if a:arg == '1'
      source %
    else
      let g:lightline = { 'colorscheme': a:arg, }
    endif
  else
    echo g:lightline
  endif
  call lightline#init()
  call lightline#colorscheme()
  call lightline#update()
endfunction

function! DelSpace()
  let cur = line('.')
  let beg = search('\S$\n\(^\s*$\n\)\+','bW')
  let beg = ( beg + 1 )
  exec (cur)
  let fin = search('\(^\s*$\n\)\+','eW')
  " exec (cur - 1)
  " " let las = search('\n^\S')
  " let las = search('\n\ *\S')
  " exec (cur + 1)
  " let beg = search('\S\n^\n','beW')
  echom (fin-beg)
  if (fin-beg+1) > 0
    silent exec (beg)','(fin)'d'
  endif
  if ( line(".") == line("$") )
    " end-of-file case
    exec "normal! o"
  else
    exec "normal! O"
  endif
endfunction

function! Parenthise()
  while ( line(".") != line("$") )
    if ( col('$') != 1 )
      normal 0i"
      normal A\n"
    endif
    normal j
  endwhile
endfunction

function! DoOnKey(keycode,command)
  let l:key = getchar()
  " echom l:key
  if ( l:key == a:keycode )
    exec a:command
  endif
endfunction

function! EvalThis()
  if getline(line('.')) =~ "^$"
    " If cursor is on a blank line, Eval next paragraph 
    exec "normal! yap:@\"\<CR>"
  else
    " Eval current line 
    if getline(line('.')) =~ '^\%[\s]*["].*'
      " Ignore the comment sign <"> if it was detected
      exec "normal! 0^wy$:@\"\<CR>"
    else
      exec "normal! yy:@\"\<CR>"
    endif
  endif
endfunction

" Exec command with output to current buffer
function! ExPut(cmd)
  redir => message
  silent exec a:cmd
  redir END
  if empty(message)
    echoerr "no output"
  else
   " use "new" instead of "tabnew" below if you prefer split windows instead of tabs
    " tabnew
    " setlocal buftype=nofile bufhidden=wipe noswapfile nobuflisted nomodified
    silent put=message
  endif
endfunction
command! -nargs=+ -complete=command ExPut call ExPut(<q-args>)

function! BD()
  " if ( ( expand('#') == '' ) || ( expand('#') =~ '!/bin/bash' ) )
  if ( expand('%') =~ '!/bin/bash' ) && ( expand('%') == expand('#') )
    enew
    bd! #
  elseif ( expand('#') == '' )
    enew
    bd! #
  else
    b #
    bd! #
  endif
endfunction
command! BD call BD()

function! SortParagraphs() range
  exec a:firstline . "," . a:lastline . 'd'
  let @@=join(sort(split(substitute(@@, "\n*$", "", ""), "\n\n")), "\n\n")
  put!
endfunction

"Highlight some line via signs
function! MySigns()
  highlight myboo ctermbg=3 ctermfg=0
  highlight mywar ctermbg=1 ctermfg=0
  sign define mybookmark text=>> linehl=myboo texthl=myboo
  sign define mywarning  text=!> linehl=mywar texthl=mywar
  nnoremap <F8> :exe ":sign place 777 line=" . line(".") ." name=mywarning file=" . expand("%:p")<CR>
  nnoremap <F9> :exe ":sign place 666 line=" . line(".") ." name=mybookmark file=" . expand("%:p")<CR>
  nnoremap <F10> :sign unplace<CR>
  if filereadable("~/.vim/signs.sav")
    source ~/.vim/signs.sav
  endif
endfunc
call MySigns()

""""""""""""""""""""""""
""      Theming:      ""
""""""""""""""""""{{{}}}

" hi! Search ctermbg=222
" hi! Normal ctermbg=234

" if filereadable($HOME."/.vimrc.local")
"   source $HOME/.vimrc.local
" endif

let hostname = substitute(system('hostname'), '\n', '', '')
if !exists("g:colors_name")
  if hostname == "warmPC" || hostname == "machine" || hostname == "debian10pc"
    " colo PaperColor | set background=light | LineColor solarized
    colo Tomorrow | LineColor Tomorrow
    " colo espresso | LineColor espresso
    " colo cryslominsa | LineColor cryslominsa
  endif
  if hostname == "machine"
    colo stellarized | set background=light | LineColor atlantis
  endif
endif

" list available colors..
" let c = getcompletion('', 'color') | new | put =c | goto 1 | map M j:exec 'colo' getline(line('.')) <cr>
" new | map M j: LineColor <C-R><C-W><cr>| exec "read ! echo; ls $VIMPLUG/lightline.vim/autoload/lightline/colorscheme" | goto 1 | del 1

" map M j:call EvalThis()<cr>
" colo snow | set background=light | LineColor ayu_light
" colo vadelma | set background=light | LineColor one
" colo PaperColor | set background=light | LineColor solarized
" colo vimspectr180-light | LineColor solarized
" colo edge | set background=light | LineColor materia
" colo Tomorrow | LineColor Tomorrow
" colo corvine_light | LineColor selenized_light
" colo cake16 | LineColor selenized_light
" colo stellarized | set background=light | LineColor PaperColor_light
" colo lost-shrine | LineColor nord
" colo cryslominsa | LineColor cryslominsa
" colo everforest | LineColor cryslominsa
" colo Tomorrow-Night | LineColor bluewery
" colo corvine | LineColor bluewery
" colo OceanicNext | LineColor bluewery
" colo espresso | LineColor espresso
" colo stellarized | set background=dark | LineColor bluewery
" colo Tomorrow-Night-Blue | LineColor bluewery
" colo edge | set background=dark | LineColor darcula
" colo vadelma | set background=dark | LineColor deus
" set notermguicolors | colo plastic | LineColor deus
" colo vimspectr180-light
" colo vimspectr150-light
" colo edge 
" colo everforest
" colo vadelma
" LineColor ayu_light
" LineColor one
" LineColor edge
" LineColor selenized_light
" LineColor material
" LineColor Tomorrow
" LineColor solarized
" LineColor nord
" LineColor atlantis
" LineColor darcula
" LineColor bluewery
" LineColor deus

""""""""""""""""""""""""
""       Trial:       ""
""""""""""""""""""{{{}}}

function! FoldSelected()
  " exec "normal O\<c-m>}}}\<c-[>ki{{{\<c-[>p"
  " exec "normal O------------------------------{{{\<c-m>\<BS>------------------------------}}}\<c-[>kp"
  exec "normal `>o------------------------------}}}\<ESC>`<O------------------------------{{{\<ESC>"
endfunction

function! s:list_buffers()
  redir => list
  silent ls
  redir END
  return split(list, "\n")
endfunction
function! s:delete_buffers(lines)
  execute 'bwipeout' join(map(a:lines, {_, line -> split(line)[0]}))
endfunction
command! BufD call fzf#run(fzf#wrap({
  \ 'source': s:list_buffers(),
  \ 'sink*': { lines -> s:delete_buffers(lines) },
  \ 'options': '--multi --reverse --bind ctrl-a:select-all+accept'
\ }))

let $FZF_DEFAULT_OPTS='--exact --layout=reverse'

function! Delete_buffers()
  let l:preview_window = get(g:, 'fzf_preview_window', &columns >= 120 ? 'right': '')
  let l:options = [
        \   '-m',
        \   '--tiebreak=index',
        \   '-d', '\t',
        \   '--prompt', 'Delete> '
        \ ]
  if len(l:preview_window)
    let l:options = extend(l:options, get(fzf#vim#with_preview(
          \   {"placeholder": "{2}"},
          \   l:preview_window
          \ ), 'options', []))
  endif
  return fzf#run(fzf#wrap({
        \ 'source':  map(
        \   filter(
        \     range(1, bufnr('$')),
        \     {_, nr -> buflisted(nr) && !getbufvar(nr, "&modified")}
        \   ),
        \   {_, nr -> s:format_buffer(nr)}
        \ ),
        \ 'sink*': {
        \   lines -> execute('bdelete ' . join(map(lines, {
        \     _, line -> substitute(split(line)[0], '^\[\|\]$', '', 'g')
        \   })), 'silent!')
        \ },
        \ 'options': l:options,
        \}))
endfunction
function! s:format_buffer(b)
  let l:name = bufname(a:b)
  let l:name = empty(l:name) ? '[No Name]' : fnamemodify(l:name, ":p:~:.")
  let l:flag = a:b == bufnr('')  ? '%' :
        \ (a:b == bufnr('#') ? '#' : ' ')
  let l:modified = getbufvar(a:b, '&modified') ? ' [+]' : ''
  let l:readonly = getbufvar(a:b, '&modifiable') ? '' : ' [RO]'
  let l:extra = join(filter([l:modified, l:readonly], '!empty(v:val)'), '')
  return substitute(printf("[%s] %s\t%s\t%s", a:b, l:flag, l:name, l:extra), '^\s*\|\s*$', '', 'g')
endfunction

" Remember folds ??
" au BufWinLeave * mkview
" au BufWinEnter * silent loadview
" "Powerline
" let $PYTHONPATH='/usr/lib/python3.6/site-packages'
" set laststatus=2
" let g:Powerline_symbols = "fancy"
" let g:LustyExplorerSuppressRubyWarning = 1

" set statusline+=%#warningmsg#
" set statusline+=%{SyntasticStatuslineFlag()}
" set statusline+=%*
" let g:syntastic_always_populate_loc_list = 1
" let g:syntastic_auto_loc_list = 1
" let g:syntastic_check_on_open = 1
" let g:syntastic_check_on_wq = 0

