super + x ; { m, s, h, n, o, a, g }
  ror.sh { '' notimem, speedcrunch, htop '$TERMINAL -e htop', nautilus, VirtualBox '', pavucontrol, listgames.sh }

super + x ; { space, z, i, f, p, q, l, c, d, b }
  { xdotool mousemove_relative 0 1600, $TERMINAL -e ask_album.sh, listalbums.sh /ln/ho/.mus-history, listalbums.sh /ln/ho/.mus-favourites, listalbums.sh /ln/ho/.mus-playlist, bspc node -c, listdwn.sh, SHFL=1 listalbums.sh /ln/ho/.mus-library, deadbeef, listdeadbeef.sh }

super + n ; { n, M, p, c, v, r, o, i, s }
  { $TERMINAL, momkitty.sh, thunar & notify-send 'new Thunar', $TERMINAL -e vifm, vinew, listzathura.sh, $TERMINAL_BIGER -e rtorrent, $TERMINAL_BIGER -e tremc -c localhost:9090, scrotfeh }

super + { q, Q, D, F, t, v, s, y, r, R, z, g, slash }
  ror.sh { \
  '' scroff, '' 'sus 1', windowswitcher.sh, '' 'rofi -show window', \
  'xterm\|urxvt\|kitty', \
  ' - VIMSERV\|VIM$\|VIM @ \| - NVIM$\|nvim $\|QtCreator' 'vinew', 'chromium\|Firefox\|Remmina' 'firefox', \
  'Thunar\|pcmanfm\| YouTube \|office.libreoffice\|Abiword' 'notify-send not\ found', zathura listzathura.sh, evince, FBReader, \
  'Telegram\|Pidgin\|Git\|TuxGuitar\|hydrogen\|VirtualBox' '', \
  '' listmenu.sh }

super + { Return, e, d, X, semicolon }
  { $TERMINAL, raiseterm.sh, dmouse, bspc node -c, setxkbmap us }

super + { c, a, A, b, m }
  ror.sh { \
  'VIFM\|Thunar' 'raiseterm.sh & notify-send "no vifm found"', \
  'transmission-remote\|tremc\|rtorrent\|qbittorrent' '$TERMINAL_BIGER -e tremc -c localhost:9090', \
  'tremc-pi' '$TERMINAL_BIGER -T tremc-pi -e tremc -c 192.168.1.78:9090', \
  ' Browser\|Noita' 'noti echo starting TorBro... ; torbrowser-launcher', \
  'btop\|htop' '$TERMINAL_BIGER -e btop' }

super + { T, V, C, B }
  raisekitty.sh { bash, VIM, VIFM, MPV }

super + f ; v
  xdotool mousemove_relative 0 1600
super + x ; x
  addlayout.sh ; xinputupd.sh ; sxd.sh ; notify-send "$( LC_ALL=ru_RU.UTF-8 date; uptime -p )"
super + x ; BackSpace
  notify-send "$(transmission-remote 192.168.1.78:9090 -st)"
super + space
  ror.sh 'deadbeef\|MPV \|mpv$' 'noti echo no player instance found'
ctrl + space
  (setxkbmap -query | grep -q "layout:\s\+us") && setxkbmap ru || setxkbmap us && notify-send "$( setxkbmap -query | grep layout | tr -s ' ' )" -t 600
alt + { Prior, Next, BackSpace }
  dunstctl { history-pop, close, close-all }
ctrl + 7
  xdotool getactivewindow windowminimize
alt + x
  dmouse
# alt + e
#   osdctl -s "$(date +%H:%M) $(setxkbmap -query | grep layout | cut -d ":" -f 2 | tr -d ', ') .$(bspc query -D -d focused --names) , "

# # i3 select desktop
# super + {1,2,3,4,5,6,7,8,9}
#   desk.sh {1,2,3,4,5,6,7,8,9}

# cycle same class windows
super + apostrophe
  ror.sh 0

alt + a
  volume.sh +3
alt + z
  volume.sh -3
alt + q
  volume.sh 100
alt + s
  volume.sh 0

# amixer set Master 3%-

# bspwm hotkeys #

# quit/restart bspwm
super + f ; {Q,R}
  bspc {quit,wm -r}

# close / kill
super + ctrl + q
  bspc node -k
super + f ; q
  bspc node -k

# alternate between the tiled and monocle layout
super + M
  bspc desktop -l next

# send the newest marked node to the newest preselected node
super + f ; p
  bspc node newest.marked.local -n newest.automatic.local

# set the window state
super + f ; {d,s,g,f}
  bspc node -t {tiled,pseudo_tiled,floating,fullscreen}

# create a receptacle node (placeholder)
super + f ; i
  bspc node -i

# send selected node to a receptacle node
super + f ; o
  bspc node -n 'any.leaf.!window' --follow

# set the node flags
super + f ; {m,t,a,e}
  bspc node -g {marked,locked,sticky,private}

# focus/swap the node in the given direction
super + {_,shift + }{h,j,k,l}
  bspc node -{f,s} {west,south,north,east}
#
# swap the current node and the biggest node
super + f ; b
  bspc node -s biggest.local
#
# swap with brother
super + f ; x
  bspc node -s @brother
#
# rotate the split
super + ctrl + {r,R}
  bspc node -f @parent ; bspc node -R {90,-90} ; bspc node older.local -f
super + f ; {r,R}
  bspc node -f @parent ; bspc node -R {90,-90} ; bspc node older.local -f
#
# rotate node
super + alt + r
  bspc node -R 90

# focus the node for the given path jump
super + ctrl + {p,b,i,o}
  bspc node -f @{parent,brother,first,second}

# focus the next/previous node in the current desktop
super + {_,shift + }w
  bspc node -f {next,prev}.local.!hidden.window
ctrl + F8
  bspc node -f next.local.!hidden.window

# focus the next/previous desktop in the current monitor
super + bracket{left,right}
  bspc desktop -f {prev,next}.local
super + {comma,period}
  bspc desktop -f {prev,next}.local

# focus the last node
super + Escape
  bspc node -f last.local
super + p
  bspc node -f last.local
super + Tab
  bspc node -f last

# focus the last desktop
alt + Tab
  bspc desktop -f last
super + ctrl + f
  bspc desktop -f last
super + BackSpace
  bspc desktop -f last

# focus the older or newer node in the focus history
super + {o,i}
  bspc wm -h off; \
  bspc node {older,newer} -f; \
  bspc wm -h on

# focus or move to the given desktop
super + {_,shift + }{1-9,0}
  bspc {desktop -f,node -d} '^{1-9,10}'

super + alt + bracket{left,right}
  bspc node -d {prev,next}.local

#
# preselect
#

# preselect the direction
super + f ; {h,j,k,l}
  bspc node -p {west,south,north,east}

# preselect the ratio
super + ctrl + {1-9}
  bspc node -o 0.{1-9}

# cancel the preselection for the focused node
super + ctrl + c
  bspc node -p cancel

# cancel the preselection for the focused desktop
super + ctrl + minus
  bspc query -N -d | xargs -I id -n 1 bspc node id -p cancel

#
# move/resize
#

# expand a window by moving one of its side outward
super + alt + {h,j,k,l}
  bspc node -z {left -15 0, bottom 0 15, top 0 -15, right 15 0}
super + alt + {Up,Down}
  bspc node -z { bottom 0 30, top 0 -30 }

# contract a window by moving one of its side inward
super + alt + {y,u,i,o}
  bspc node -z {right -15 0, top 0 15, bottom 0 -15, left 15 0}

# move a floating window
super + {Left,Down,Up,Right}
  bspc node -v {-22 0, 0 22, 0 -22, 22 0}
super + shift + {Left,Down,Up,Right}
  bspc node -v {-1 0, 0 1, 0 -1, 1 0}

