" vim: filetype=vim :
" Sample configuration file for vifm (last updated: 28 June, 2016)
" You can edit this file by hand.
" The " character at the beginning of a line comments out the line.
" Blank lines are ignored.
" The basic format for each item is shown with an example.
" ------------------------------------------------------------------------------

if (system('[ -f /tmp/now_is_day ] && echo 1') == "1" )
    colo reicheltd-light
elseif (system('[ -f /tmp/now_is_nox ] && echo 1') == "1" )
    colo crown_24bit
    " colo dracula
    " colo iceberg
else
    " colo reicheltd-light
    colo iceberg
    " colo dracula
    " colorscheme Default
endif

!echo -ne "\033]0;VIFM\007"
" wincmd o

command! CC :! mv /ln/dwn/cover.* .
command! ogg :! cd %c && conv_uni2ogg.sh . %D &>/dev/null ; notify-send "%c converted" &
command! flac :! cd %c && conv_uni2flac.sh . %D &>/dev/null ; notify-send "%c converted" &
command! mpiii :! ffmpeg -i %c -qscale:a 2 %D/%c.mp3 &>/dev/null &
" command! respic :! echo $PWD && respic.sh 50%%%%
command! respic :! echo $PWD ; respic.sh %a
command! rescol :! convert %c -quality 95%%  -sampling-factor '2x2,1x1,1x1' %c.jpg
command! respng :! mkdir res ; for f in *.png; do d=${f%%%%.*} ; convert "$f" -quality 95%%%% -sampling-factor 4:4:4  jpg:res/"$d"".jpg" ; done # png to jpg
map re :! for f in %f; do d=${f%%.*} ; convert "$f" -resize 50%% -sampling-factor 4:4:4 -quality 95%% jpg:"$d"".R.jpg" ; done
command! resmusAll :! mkdir resampled orig ; for flac in *.flac; do sox -S "${flac}" -G -b 16 ./resampled/"${flac}" rate -v -L 44100 dither ; mv "${flac}" orig/ ; done
" sox input.flac -G -b 16 output.flac rate -v -L 44100 dither
command! resmusBit :! mkdir resampled orig ; for flac in *.flac; do sox -S "${flac}" -b 16 ./resampled/"${flac}"; mv "${flac}" orig/ ; done
" command! ff :!fehf . &>/dev/null &
" command! tok :!touch %c "--date=@$(expr $(stat -c %%%%Y KKK) - 100)" ; touch KKK "--date=@$(expr $(stat -c %%%%Y KKK))"
command! tok :! touch %c "--date=$(date -R -r KKK) - 10 minute" ; touch KKK "--date=$(date -R -r KKK) + 3 minute"
command! tik :!touch --date="$(date -R -r %c) + 10 minute" KKK
" command! tik :!touch --date="$(date -R -r %c) + 1 day" %c
command! amou :! bash -ic ' source /ln/ho/.bashrc ; amou '
command! aumo :! bash -ic ' source /ln/ho/.bashrc ; aumo '
command! own  :! sudo chown 1000:100 %f

""""""""""""""""""""""""
""     Mappings:      ""
""""""""""""""""""""""""

" fly vifm "
" nnoremap ,x :quit <CR>
" nnoremap qx :quit <CR>
nnoremap ,x :exec '! echo -ne "\033]0;\007"' | quit <CR>
nnoremap ,q :exec '! echo -ne "\033]0;\007"' | qa <CR>
nnoremap ,i :pushd . <CR>
nnoremap ,m :set millerview!<CR>
nnoremap ,M :set milleroptions=lsize:1,csize:5,rsize:5
nnoremap dd :delete<CR>
nnoremap o :sort<CR>
nnoremap O :invert o<CR>
nnoremap qs :split <CR>
nnoremap qv :vsplit <CR>
nnoremap ,b :colo <CR>
nnoremap qw :wincmd o<CR>
nnoremap qz :wincmd =<CR>
nnoremap q, 8<c-w><
nnoremap q. 8<c-w>>
nnoremap qt :tree!<CR>
nnoremap g<Down> hjl
nnoremap g<Up> hkl
nnoremap cd :cd<space>
nnoremap qq :
nnoremap q; :<up>
nnoremap aj :<up><CR>
nnoremap ,vv :source $MYVIFMRC <CR>
nnoremap ar ggvGcw
nnoremap ae :winrun , cd %C <CR><Tab>
nnoremap a= :winrun , cd %D <CR><Tab>
nnoremap cv cW
nnoremap t tj
nnoremap T tk
nnoremap at :tabnew<CR>
nnoremap gr :tabprev<CR>
nnoremap q[ :tabprev<CR>
nnoremap q] :tabnext<CR>
nnoremap q{ :tabmove-<CR>
nnoremap q} :tabmove+<CR>
nnoremap gl gf
nnoremap g. :exec 'cd' system('realpath .')<CR>
nnoremap yc :! echo -n %f | xclip ; echo -n %f | xclip -selection clipboard <CR>:echo "filename in X buffer"<CR>
nnoremap yC :! echo -n %f:p | xclip ; echo -n %f:p | xclip -selection clipboard <CR>:echo "full filepath in X buffer"<CR>
" nnoremap - <C-b>
" nnoremap = <C-f>

" Open current file "
nnoremap qc :! ./%c <cr>
nnoremap a. :!vim %c<CR>
nnoremap qm :! nomacs %c &>/dev/null &<cr>
nnoremap qf :! if [ %c == ".." ] ; then feha . ; else if [ -d %c ] ; then cd %c; feha . ; else if [ -f %c ] ; then feha %c; fi ; fi ; fi <cr>
nnoremap qF :! fehf . <cr>
nnoremap ,n :! ncdu --color off -x %c<cr>
nnoremap q<space> :! mpv --fs --keep-open=always *.{mp4,MP4,webm,mkv,mov,MOV} &>/dev/null & <cr>
nnoremap qk :! qview %c &>/dev/null &<cr>
" nnoremap qy :! eom %c &>/dev/null &<cr>
nnoremap qi :! mediainfo %c | less<cr>
nnoremap qh :! xxd %c | less <cr>
nnoremap qG :! spek %c &>/dev/null &<cr>
nnoremap qg :! specgram.sh %c <cr>
nnoremap qd :! deadbeef --queue %c &>/dev/null & <cr>
nnoremap qe :! $EDITOR %c <cr>
nnoremap ql :! xdg-open %c &>/dev/null & <cr>
nnoremap .  :! xdg-open %c &>/dev/null & <cr>
nnoremap q<cr> :file &<cr>l
nnoremap ,g :! google.sh %c &>/dev/null & <cr>
nnoremap ,v :! $TERMINAL $EDITOR %c <cr>

" Calc space "
nnoremap ,f :! echo; echo %c: ; file -b %c ; [[ -d %c ]] && tree -ia %c | tail -1 ; du -sh %c | cut -f1 ; ls -dla %c ; df -h --output=source,avail,pcent %c ; read -rsn1 <cr>
nnoremap ,<space> :echo "Available space on " . system("df -h --output=source,avail . | tail -1")<cr>
nnoremap ,F :! watch -n .4 ls -la --block-size=M %f
nnoremap ,. :! echo -ne \\n  ls dir :\\n ; ls -la --color=auto . ; read -rsn1 <cr>
nnoremap ,a :! clear -x; $LSBLK -o NAME,FSTYPE,LABEL,SIZE,MOUNTPOINT ; read -rsn1 <cr>
nnoremap ,s :! clear -x; df -BMB ; read -rsn1 <cr>
nnoremap qy :! echo -ne "\n-- Try to sync @ $(date '+%%Y-%%m-%%d %%H:%%M:%%S') ...... \n" ; (time sync) 2>&1 | tr '\t' ' ' | tr '\n' '\t' ; echo -ne "\n-- Complete    @ $(date '+%%Y-%%m-%%d %%H:%%M:%%S')\n" <CR>:echo "Sync complete!"<CR>
nnoremap z<BS> :! echo -ne "\n-- Try to sync @ $(date '+%%Y-%%m-%%d %%H:%%M:%%S') ...... \n" ; (time sync) 2>&1 | tr '\t' ' ' | tr '\n' '\t' ; echo -ne "\n-- Complete    @ $(date '+%%Y-%%m-%%d %%H:%%M:%%S')\n" <CR>:echo "Sync complete!"<CR>

" Send to vim server "
nnoremap as :! MODE="split"  virpc "%c"  <cr>
nnoremap av :! MODE="vert"   virpc "%c" &>/dev/null & <cr>
nnoremap ac :! MODE="cur"    virpc "%c" &>/dev/null & <cr>
nnoremap an :! MODE="newtab" virpc "%c" &>/dev/null & <cr>
nnoremap ab :! MODE="last"   virpc "%c" &>/dev/null & <cr>
nnoremap aa :! MODE="auto"   virpc "%c" &>/dev/null & <cr>
nnoremap aq :! virpc "%c"<cr>:q<cr>
nnoremap ,d :! vim -d %c %D/%c <cr>
" if (system('echo $EDITOR') == "vim")
"     nnoremap an :! MODE="newtab" vimrpc "%c" &>/dev/null & <cr>
" endif

" Play music with mpv "
nnoremap b :! PAUSE=0 INVIFM=1 ASK=1 mpv-album %c VIFM; echo -ne "\033]0;VIFM\007" <cr>
nnoremap B :! %i cd %c; [[ $TERMINAL=="kitty "* ]] && TERMINAL="$TERMINAL -o initial_window_height=$(expr 450 + $HIDPI \* 100) -o initial_window_width=$(expr 650 + $HIDPI \* 130)"; $TERMINAL -e /bin/bash -c "ASK=1 mpv-album ." &>/dev/null & <cr>
nnoremap qb :! kitty @ new-window --new-tab /bin/bash -c "cd %d/ ; ASK=0 mpv-album %c VIFM ; vifm --select %c" <cr>

" Do rsync "
nnoremap rs :! echo -ne "\n========== dry-run\n" ; rsync -rtln --progress --delete --stats --size-only %d/ %D ; read -n 1 -s -r -p "Press F or ENTER or SPACE to sync; ESC to cancel" key ; echo -ne "\n\n========== real\n" ; [[ "$key" == 'f' || "$key" == '' ]] && ( rsync -rtl  --progress --delete --stats --size-only %d/ %D ; read -n 1 -s -r -p "========== DONE!" ; echo ) || echo
nnoremap rS :! echo -ne "\n========== dry-run\n" ; rsync -rtKn --progress --delete --stats --size-only %d/ %D ; read -n 1 -s -r -p "Press F or ENTER or SPACE to sync; ESC to cancel" key ; echo -ne "\n========== real\n" ; [[ "$key" == 'f' || "$key" == '' ]] && ( rsync -rtK  --progress --delete --stats --size-only %d/ %D ; read -n 1 -s -r -p "========== DONE!" ; echo ) || echo
" nnoremap rS :! echo -ne "\n" ; rsync -rt  --progress --delete --stats --size-only %d/ %D ; read -n 1 -s -r -p "========== DONE!" ; echo

" Operate files "
nnoremap ai : amou <cr>
nnoremap ao : aumo <cr>
nnoremap au :! echo Sync... ; sync %f && udevil umount %f<cr>
nnoremap am ggVG<cr>:copy<cr>
nnoremap aM ggVG<cr>:move<cr>
nnoremap del :! echo You try to delete %f; sudo rm -r %f <cr>
nnoremap qU ggVG: !mv --backup=numbered %f ../<cr>
nnoremap qu :! mv --backup=numbered %f ../<cr>
nnoremap ctok :tok<cr>
nnoremap ch :chmod<cr>
nnoremap cj :chmod 644 <cr>j
nnoremap cb :copy | ! notify-send COPY Done!<cr>
nnoremap cB :copy<cr>
nnoremap cm :move<cr>
nnoremap C :copy<cr>
nnoremap E :move<cr>
noremap ak :!touch %f --date=now<cr>
nnoremap cn :clone<cr>
nnoremap ah :!ln  $PWD/%c %D/%c <cr>
nnoremap al :!ln -rs $PWD/%c %D/%c <cr>
nnoremap ap al
nnoremap aL :!ln -s $PWD/%c %d/%cL <cr>

" Compress files "
nnoremap zu :! upk2dir.sh %c <cr>
nnoremap zU :! upk2dir.sh %c %D <cr>
nnoremap zp :! 7z a -mx=6 -xr!tags %c.7z %f <cr>
nnoremap z0 :! 7z a -mx=1 -xr!tags %c.7z %f
nnoremap zP :! 7z a -mx=6 -xr!tags %D/%c.7z %f <cr>
let $TAR_IGNOR="--exclude='.git' --exclude='tags' --exclude='debug/*' --exclude='build/*' --exclude='~$*'"
nnoremap zs :! tar -I 'zstd -10v -T0' -X /ln/sh/zip_exclu -cf    %c.tar.zst %f
nnoremap zS :! tar -I 'zstd -10v -T0' -X /ln/sh/zip_exclu -cf %D/%c.tar.zst %f
nnoremap ze :! upk.sh %c <cr>
nnoremap zE :! cd %D; upk.sh %d/%c <cr>
nnoremap z"e :! upk.sh %r" <cr>
nnoremap z"E :! upk2dir.sh %r" %d <cr>

" Jump to places "
nnoremap gh :cd $HOME<cr>
nnoremap gz :cd /ln/hh<cr>
nnoremap g; :cd /ln/mo<cr>
nnoremap gq :cd /ln/ho/qq<cr>:sort<cr>N
nnoremap g/ :cd /ln<cr>
nnoremap gm :cd /ln/mus/
nnoremap go :cd /ln/ho/moment<cr>
nnoremap gx :trashes<cr>
nnoremap gc :cd $HOME/.config<cr>
nnoremap gs :cd /ln/sh<cr>
nnoremap gw :cd /ln/wo<cr>
nnoremap gj :cd /ln/ho/gitjob<CR>
nnoremap gd :cd /ln/dwn<CR>:set sort=-mtime<CR>:16<CR>
nnoremap gb :cd $bakcld<CR>
nnoremap gB :cd $bakhot<CR>
nnoremap gy :cd /ln/mob<CR>
nnoremap gS :cd $baksam/..<CR>:goto bak<CR>
nnoremap gk :cd /ln/torrents/red/KKK<CR>:sort<CR>mh
nnoremap gv :cd ~/.vim<CR>:goto plugged<CR>
nnoremap gn :cd ~/.config/nvim<CR>:goto plugged<CR>
nnoremap gN :cd ~/01/new/<CR>

""""""""""""""""""""""""
""     Settings:      ""
""""""""""""""""""""""""

set syscalls
set confirm=permdelete
set title
set cpoptions=fs
set vimhelp

" This is the actual command used to start vi.  The default is vim.
" If you would like to use another vi clone such as Elvis or Vile
" you will need to change this setting.

" set vicmd='source $HOME/.bashrc; vim --cmd "set titlestring=VIM\ @\ VIFM"'
" set vicmd=elvis\ -G\ termcap
" set vicmd=vile
set vicmd=$EDITOR

if (system('echo $INVIM') == "1")
    set vicmd='source $HOME/.bashrc; MODE="cur" vimrpc'
else
    set vicmd='source $HOME/.bashrc; vim --cmd "set titlestring=VIM\ @\ VIFM"'
endif

" Trash Directory
" The default is to move files that are deleted with dd or :d to
" the trash directory.  If you change this you will not be able to move
" files by deleting them and then using p to put the file in the new location.
" I recommend not changing this until you are familiar with vifm.
" This probably shouldn't be an option.

set trash

" This is how many directories to store in the directory history.

set history=100

" Automatically resolve symbolic links on l or Enter.

set nofollowlinks

" With this option turned on you can run partially entered commands with
" unambiguous beginning using :! (e.g. :!Te instead of :!Terminal or :!Te<tab>).

set fastrun

" Natural sort of (version) numbers within text.

set sortnumbers

" Maximum number of changes that can be undone.

set undolevels=100

" If you installed the vim.txt help file set vimhelp.
" If would rather use a plain text help file set novimhelp.

" set novimhelp

" If you would like to run an executable file when you
" press return on the file name set this.

set norunexec

" Use KiB, MiB, ... instead of KB, MB, ...

set noiec

" Format for displaying time in file list. For example:
" TIME_STAMP_FORMAT=%m/%d-%H:%M
" See man date or man strftime for details.

set timefmt=%Y-%m-%d\ %H:%M

" Show list of matches on tab completion in command-line mode

set wildmenu

" Display completions in a form of popup with descriptions of the matches

set wildstyle=popup

" Display suggestions in normal, visual and view modes for keys, marks and
" registers (at most 5 files).  In other view, when available.

set suggestoptions=normal,visual,view,otherpane,keys,marks,registers

" Ignore case in search patterns unless it contains at least one uppercase
" letter

set ignorecase
set smartcase

" Don't highlight search results automatically

set nohlsearch

" Use increment searching (search while typing)
set incsearch

" Try to leave some space from cursor to upper/lower border in lists

set scrolloff=2

" Don't do too many requests to slow file systems

if !has('win')
    set slowfs=curlftpfs
endif

" Set custom status line look

set statusline="  Hint: %z%= %A %10u:%-7g %15s %20d  "

" ------------------------------------------------------------------------------

" :mark mark /full/directory/path [filename]

"mark h ~/

" ------------------------------------------------------------------------------

" :com[mand][!] command_name action
" The following macros can be used in a command
" %a is replaced with the user arguments.
" %c the current file under the cursor.
" %C the current file under the cursor in the other directory.
" %f the current selected file, or files.
" %F the current selected file, or files in the other directory.
" %b same as %f %F.
" %d the current directory name.
" %D the other window directory name.
" %m run the command in a menu window

command! df df -h %m 2> /dev/null
command! vimdiff vim -d %f %F
command! vimdiffpane vim -d %f
command! diff ! echo; diff %c %C && echo "files identical"; read -rsn1
command! diffpane ! echo; diff %f && echo "files identical"; read -rsn1
command! zip zip -r %f.zip %f
command! run !! ./%f
command! make !!make %a
command! mkcd :mkdir %a | cd %a
command! vgrep vim "+grep %a"
command! reload :write | restart

" ------------------------------------------------------------------------------

" The file type is for the default programs to be used with
" a file extension.
" :filetype pattern1,pattern2 defaultprogram,program2
" :fileviewer pattern1,pattern2 consoleviewer
" The other programs for the file type can be accessed with the :file command
" The command macros %f, %F, %d, %F may be used in the commands.
" The %a macro is ignored.  To use a % you must put %%.

" For automated FUSE mounts, you must register an extension with :file[x]type
" in one of following formats:
"
" :filetype extensions FUSE_MOUNT|some_mount_command using %SOURCE_FILE and %DESTINATION_DIR variables
" %SOURCE_FILE and %DESTINATION_DIR are filled in by vifm at runtime.
" A sample line might look like this:
" :filetype *.zip,*.jar,*.war,*.ear FUSE_MOUNT|fuse-zip %SOURCE_FILE %DESTINATION_DIR
"
" :filetype extensions FUSE_MOUNT2|some_mount_command using %PARAM and %DESTINATION_DIR variables
" %PARAM and %DESTINATION_DIR are filled in by vifm at runtime.
" A sample line might look like this:
" :filetype *.ssh FUSE_MOUNT2|sshfs %PARAM %DESTINATION_DIR
" %PARAM value is filled from the first line of file (whole line).
" Example first line for SshMount filetype: root@127.0.0.1:/
"
" You can also add %CLEAR if you want to clear screen before running FUSE
" program.

" Pdf
filextype *.pdf,*.djvu zathura %c %i &, apvlv %c, xpdf %c
        \ {View in zathura}
        \ zathura %f,
fileviewer *.pdf pdftotext -nopgbrk %c -

" E-Books
filextype *.fb2,*.mobi,*.epub FBReader %c &

" PostScript
filextype *.ps,*.eps,*.ps.gz
        \ {View in zathura}
        \ zathura %f,
        \ {View in gv}
        \ gv %c %i &,

" Audio
filetype *.wav,*.mp3,*.flac,*.m4a,*.m4b,*.mka,*.wma,*.ape,*.ac3,*.og[agx],*.spx,*.opus,
       \ {play using mpv}
       \ mpv %f,
       \ echo -ne "\033]0;MPV @ VIFM\007"; mpv %f,
       \ {Play using ffmpeg}
       \ ffplay -nodisp %c,
       \ {Play using MPlayer}
       \ mplayer %f,
fileviewer *.mp3 mp3info
fileviewer *.flac soxi

" Video
filextype *.avi,*.mp4,*.wmv,*.dat,*.3gp,*.ogv,*.mkv,*.mpg,*.mpeg,*.vob,*.gif,
        \*.fl[icv],*.m2v,*.mov,*.webm,*.ts,*.mts,*.m4v,*.r[am],*.qt,*.divx,
        \*.as[fx]
        \ {play using mpv}
        \ mpv --fs %c &>/dev/null &,
        \ {View using ffplay}
        \ ffplay -fs %f,
        \ {View using Dragon}
        \ dragon %f:p,
        \ {View using mplayer}
        \ mplayer %f,
fileviewer *.avi,*.mp4,*.wmv,*.dat,*.3gp,*.ogv,*.mkv,*.mpg,*.mpeg,*.vob,
         \*.fl[icv],*.m2v,*.mov,*.webm,*.ts,*.mts,*.m4v,*.r[am],*.qt,*.divx,
         \*.as[fx]
         \ ffprobe -pretty %c 2>&1

" Web
filextype *.html,*.htm
        " \ chromium %c &>/dev/null & ,
        \ firefox %f &,
        \ uzbl-browser %f %i &,
filetype *.html,*.htm links, lynx

" Object
filetype *.o nm %f | less

" Man page
filetype *.[1-8] man ./%c
fileviewer *.[1-8] man ./%c | col -b

" Images
filextype *.bmp,*.jpg,*.jpeg,*.png,*.xpm,*.webp,*gif
        \ feha %c &>/dev/null &,
        \ nomacs -f -m frameless %c &>/dev/null &,
        \ eom %c &>/dev/null &,
        \ ristretto %c,
        \ sxiv,
        \ gpicview %c,
        \ shotwell,
fileviewer *.bmp,*.jpg,*.jpeg,*.png,*.gif,*.xpm
         \ convert -identify %f -verbose /dev/null

" OpenRaster
filextype *.ora
        \ {Edit in MyPaint}
        \ mypaint %f,

" Mindmap
filextype *.vym
        \ {Open with VYM}
        \ vym %f &,

" MD5
filetype *.md5
       \ {Check MD5 hash sum}
       \ md5sum -c %f %S,

" SHA1
filetype *.sha1
       \ {Check SHA1 hash sum}
       \ sha1sum -c %f %S,

" SHA256
filetype *.sha256
       \ {Check SHA256 hash sum}
       \ sha256sum -c %f %S,

" SHA512
filetype *.sha512
       \ {Check SHA512 hash sum}
       \ sha512sum -c %f %S,

" GPG signature
filetype *.asc
       \ {Check signature}
       \ !!gpg --verify %c,

" Torrent
filetype *.torrent ktorrent %f &
fileviewer *.torrent transmission-show %c
" fileviewer *.torrent dumptorrent -v %c

" FuseZipMount
filetype *.zip,*.jar,*.war,*.ear,*.oxt,*.apkg
       \ {Mount with fuse-zip}
       \ FUSE_MOUNT|fuse-zip %SOURCE_FILE %DESTINATION_DIR,
       \ {View contents}
       \ zip -sf %c | less,
       \ {Extract here}
       \ tar -xf %c,
fileviewer *.zip,*.jar,*.war,*.ear,*.oxt zip -sf %c

" ArchiveMount
filetype *.tar,*.tar.bz2,*.tbz2,*.tgz,*.tar.gz,*.tar.xz,*.tar.zst,*.txz
       \ {Mount with archivemount}
       \ FUSE_MOUNT|archivemount %SOURCE_FILE %DESTINATION_DIR,
       \ {List contents}
       \ tar -tf %c | less,
fileviewer *.tgz,*.tar.gz tar -tzf %c
fileviewer *.tar.bz2,*.tbz2 tar -tjf %c
fileviewer *.tar.txz,*.txz xz --list %c
fileviewer *.tar,*.tar.zst tar -tf %c

" filetype *.tar.zst
"       \ tar -tf %c | less

" Rar2FsMount and rar archives
filetype *.rar
       \ {Mount with rar2fs}
       \ FUSE_MOUNT|rar2fs %SOURCE_FILE %DESTINATION_DIR,
fileviewer *.rar unrar v %c

" IsoMount
filetype *.iso
       \ {Mount with fuseiso}
       \ FUSE_MOUNT|fuseiso %SOURCE_FILE %DESTINATION_DIR,

" SshMount
filetype *.ssh
       \ {Mount with sshfs}
       \ FUSE_MOUNT2|sshfs %PARAM %DESTINATION_DIR,

" FtpMount
filetype *.ftp
       \ {Mount with curlftpfs}
       \ FUSE_MOUNT2|curlftpfs -o ftp_port=-,,disable_eprt %PARAM %DESTINATION_DIR,

" Fuse7z and 7z archives
filetype *.7z,*.rar,*.zip
       \ {Mount with fuse-7z}
       \ FUSE_MOUNT|fuse-7z %SOURCE_FILE %DESTINATION_DIR,
       \ {List}
       \ 7z l %c | less +G,
fileviewer *.7z 7z l %c

" Office files
filextype *.odt,*.doc,*.docx,*.xls,*.xlsx,*.odp,*.pptx libreoffice %f &
fileviewer *.doc catdoc %c
fileviewer *.docx, docx2txt.pl %f -

" TuDu files
filetype *.tudu tudu -f %c

" Qt projects
filextype *.pro qtcreator %f &

" Directories
filextype */
        \ {View in thunar}
        \ Thunar %f &,

" " Draw file icons
" " file types
" set classify=' :dir:/, :exe:, :reg:, :link:'
" " various file names
" set classify+=' ::../::, ::*.sh::, ::*.[hc]pp::, ::*.[hc]::, ::/^copying|license$/::, ::.git/,,*.git/::, ::*.epub,,*.fb2,,*.djvu::, ::*.pdf::, ::*.htm,,*.html,,**.[sx]html,,*.xml::'
" " archives
" set classify+=' ::*.7z,,*.ace,,*.arj,,*.bz2,,*.cpio,,*.deb,,*.dz,,*.gz,,*.jar,,*.lzh,,*.lzma,,*.rar,,*.rpm,,*.rz,,*.tar,,*.taz,,*.tb2,,*.tbz,,*.tbz2,,*.tgz,,*.tlz,,*.trz,,*.txz,,*.tz,,*.tz2,,*.xz,,*.z,,*.zip,,*.zoo::'
" " images
" set classify+=' ::*.bmp,,*.gif,,*.jpeg,,*.jpg,,*.ico,,*.png,,*.ppm,,*.svg,,*.svgz,,*.tga,,*.tif,,*.tiff,,*.xbm,,*.xcf,,*.xpm,,*.xspf,,*.xwd::'
" " audio
" set classify+=' ::*.aac,,*.anx,,*.asf,,*.au,,*.axa,,*.flac,,*.m2a,,*.m4a,,*.mid,,*.midi,,*.mp3,,*.mpc,,*.oga,,*.ogg,,*.ogx,,*.ra,,*.ram,,*.rm,,*.spx,,*.wav,,*.wma,,*.ac3::'
" " media
" set classify+=' ::*.avi,,*.ts,,*.axv,,*.divx,,*.m2v,,*.m4p,,*.m4v,,.mka,,*.mkv,,*.mov,,*.mp4,,*.flv,,*.mp4v,,*.mpeg,,*.mpg,,*.nuv,,*.ogv,,*.pbm,,*.pgm,,*.qt,,*.vob,,*.wmv,,*.xvid::'
" " office files
" set classify+=' ::*.doc,,*.docx::, ::*.xls,,*.xls[mx]::, ::*.pptx,,*.ppt::'

" Syntax highlighting in preview
"
" Explicitly set highlight type for some extensions
"
" 256-color terminal
" fileviewer *.[ch],*.[ch]pp highlight -O xterm256 -s dante --syntax c %c
" fileviewer Makefile,Makefile.* highlight -O xterm256 -s dante --syntax make %c
"
" 16-color terminal
" fileviewer *.c,*.h highlight -O ansi -s dante %c
"
" Or leave it for automatic detection
"
" fileviewer *[^/] pygmentize -O style=monokai -f console256 -g

" Displaying pictures in terminal
"
" fileviewer *.jpg,*.png shellpic %c

" Open all other files with default system programs (you can also remove all
" :file[x]type commands above to ensure they don't interfere with system-wide
" settings).  By default all unknown files are opened with 'vi[x]cmd'
" uncommenting one of lines below will result in ignoring 'vi[x]cmd' option
" for unknown file types.
" For *nix:
filetype *.dxf xdg-open &>/dev/null &
" For OS X:
" filetype * open
" For Windows:
" filetype * start, explorer

" ------------------------------------------------------------------------------

" What should be saved automatically between vifm runs
" Like in previous versions of vifm
" set vifminfo=options,filetypes,commands,bookmarks,dhistory,state,cs
" Like in vi
set vifminfo=dhistory,savedirs,chistory,state,tui,shistory,
    \phistory,fhistory,dirstack,registers,bookmarks,bmarks

" ------------------------------------------------------------------------------

" Examples of configuring both panels

" Customize view columns a bit (enable ellipsis for truncated file names)
"
" windo set viewcolumns=-{name}..,6{}.

" Filter-out build and temporary files
"
" windo filter! /^.*\.(lo|o|d|class|py[co])$|.*~$/

" ------------------------------------------------------------------------------

" Start shell in current directory
nnoremap s :shell<cr>

" Display sorting dialog
nnoremap S :sort<cr>

" Toggle visibility of preview window
nnoremap w :view<cr>
vnoremap w :view<cr>gv

" Open file in the background using its default program
" nnoremap gb :file &<cr>l

" Yank current directory path into the clipboard
nnoremap yd :!echo %d | xclip %i<cr>

" Yank current file path into the clipboard
nnoremap yf :!echo %c:p | xclip %i<cr>

" Mappings for faster renaming
nnoremap I cw<c-a>
nnoremap cc cw<c-u>
nnoremap A cw

" Open console in current directory
nnoremap ,t :!$TERMINAL &<cr>

" Open editor to edit vifmrc and apply settings after returning to vifm
nnoremap ,c :write | edit $MYVIFMRC | restart<cr>
" Open gvim to edit vifmrc
nnoremap ,C :!gvim --remote-tab-silent $MYVIFMRC &<cr>

" Toggle wrap setting on ,w key
nnoremap ,w :set wrap!<cr>

" Example of standard two-panel file managers mappings
nnoremap <f3> :!less %f<cr>
nnoremap <f4> :edit<cr>
nnoremap <f5> :copy<cr>
nnoremap <f6> :move<cr>
nnoremap <f7> :mkdir<space>
nnoremap <f8> :delete<cr>

" ------------------------------------------------------------------------------

" Various customization examples

" Use ag (the silver searcher) instead of grep
"
" set grepprg=ag\ --line-numbers\ %i\ %a\ %s

" Add additional place to look for executables
"
" let $PATH=$HOME.'/bin/fuse:'.$PATH

" Block particular shortcut
"
" nnoremap <left> <nop>


"! i3-msg "split v"

command! FZFlocate : set noquickview
                  \| let $FZF_PICK = term('locate $HOME | fzf --height 10 2>/dev/tty')
                  \| if $FZF_PICK != ''
                  \|     execute 'goto' fnameescape($FZF_PICK)
                  \| endif
command! FZFfind : set noquickview
                \| let $FZF_PICK = term('find | fzf --height 10 2>/dev/tty')
                \| if $FZF_PICK != ''
                \|     execute 'goto' fnameescape($FZF_PICK)
                \| endif
" variation that automatically enters directories
command! FZFlocate : set noquickview
                  \| let $FZF_PICK = term('locate $HOME | fzf --height 10 2>/dev/tty')
                  \| if $FZF_PICK != ''
                  \|     execute system('[ -f "$FZF_PICK" ] && echo goto || echo cd') fnameescape($FZF_PICK)
                  \| endif
" nnoremap <C-j> :FZFlocate<cr>
nnoremap <C-j> :FZFfind<cr>

source $lo/vifmrc.local
source /ln/sh/conf/favicons.vifm

