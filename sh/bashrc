#!/bin/bash

[[ -z $MSYSTEM_PREFIX ]] &&
{
#PS1='[\u@\h \W]\$ '
#PS1='\[\033[01;32m\]\u@\h\[\033[01;34m\] \w \$\[\033[00m\]'
#PS1="\[$(tput bold)\]\[$(tput setaf 7)\]┌[\d][\t][\u@\h][\W]\n└\$ \[$(tput sgr0)\]"
#PS1='\[\033[01;32m\]☿\[\e[38m\]\[\033[00m\] \w\[\e[m\] \[\033[01;34m\]\$\[\033[00m\] '
#PS1=$'\[$(tput bold)\]\[$(tput setaf 2)\]\xe2\x98\xbf[\W]\$ \[$(tput sgr0)\]'
#PS1=$'\[$(tput bold)\]\[$(tput setaf 46)\]\u \W \$ \[$(tput sgr0)\]'
#PS1=$'\[$(tput bold)\]\[$(tput setaf 113)\]\u\[$(tput setaf 2)\] \W \$ \[$(tput sgr0)\]'
#PS1='\[\e]0;\w\a\]\n\[\e[32m\]\u@\h \[\e[33m\]\w\[\e[0m\]\n\$'
#PS1="\[\e]0;\h: \a\]$PS1"
PS1=$'\[$(tput bold)\]\[$(tput setaf 34)\]\u\[$(tput setaf 78)\] \W \[$(tput setaf 34)\]\$ \[$(tput sgr0)\]'
}

# Aliases #
alias bb='tty | grep -q /dev/tty && ( terminusfont; [[ -f /usr/bin/tap ]] && sudo /usr/bin/tap; startx $sh/xinitrc bspwm ) || echo This is not tty!'
alias tf='terminusfont'
alias v='vir'
alias fm='vifm'
#alias tm='cd; tmux new -s defs'
alias tm='cd; tmuxp load $sh/conf/tmuxp.yaml -Lrandom -f $sh/conf/tmux.conf'
alias va='MODE=last nvimrpc'
alias ll='ls -la'
alias s='git status'
alias b='git branch -a'
alias gl='git log -3 '
alias gs='( [[ -f $HOME/.env ]] && . "$HOME"/.env; gsync )'
alias ggg='git add . ; git commit -m --- ; git push'
alias yp='fc -ln -1 | cut -c 3- | tr -d "\n" | xclip; echo yanked prev command'
alias ram='sudo python "$sh"/mem.py'
alias sb='source "$HOME"/.bashrc'
alias xc='echo --Copy X sel to clipboard; xclip -o| xclip -i -selection clipboard'
alias cx='echo --Copy clipboard to X sel; xclip -o -selection clipboard| xclip -i'
# alias kt='kitty +kitten themes; kitty @ set-colors -a "$HOME"/.config/kitty/current-theme.conf'
# alias kr='kitty @ set-colors -a "$HOME"/.config/kitty/current-theme.conf "$sh"/conf/kitty_extra.conf'
alias chmodre='find . -type f -exec chmod 644 {} \;'
alias ncdu='ncdu --color off'
# alias ncdu='ncdu --color off --graph-style hash'
alias lm='df -BGB --output=source,fstype,avail,pcent,target -x tmpfs -x devtmpfs'
alias wlm='watch -n.4 df -BMB --output=source,avail,pcent,target'
alias lb='$LSBLK -o NAME,FSTYPE,LABEL,SIZE,MOUNTPOINT,FSUSE% | grep "sd\|nvme" --color=none'
alias wlb='watch -n.4 $LSBLK -o NAME,FSTYPE,LABEL,SIZE,MOUNTPOINT'
alias leto='date +%Y-%m-%d'
alias p='ps aux | grep -v grep | grep'
alias mm='make -f my_Makefile'
alias dropcs='sync && echo 3 | sudo tee /proc/sys/vm/drop_caches'
alias nuts='sudo qemu-system-x86_64 -m 1400 -enable-kvm -cpu host -smp 4 -boot menu=on'
# alias qu='sync && echo 3 | sudo tee /proc/sys/vm/drop_caches; sudo qemu-system-x86_64 -m 1400  -enable-kvm -cpu host -smp 4 '

type -f ai &>/dev/null ||
if  type -f pacman &>/dev/null; then
    alias as='pacman -Ss'
    alias ai='sudo pacman -S'
elif type -f apt &>/dev/null; then
    alias as='apt search'
    alias ai='sudo apt install'
fi

if command -v most >/dev/null 2>&1; then
    export PAGER=most
fi

source "$sh"/dmenurc

amou() { SELECTOR="fzf -e" amount.sh; }
aumo() { SELECTOR="fzf -e" aumount.sh; }
# title() { echo -ne "\e]0;$*\a"; }
title() { echo -ne "\033]0;$*\007"; }

# Functions #
zz() { du -csh $*; arcname=$(echo "$*" | tr / _); tar -I 'zstd -10 -T0' -cf "$arcname".tar.zst --exclude='.git' --exclude='tags' $*; du -sh "$arcname".tar.zst; }
z7() { du -csh $*; arcname=$(echo "$*" | tr / _); 7z a -mx=3 "$arcname".7z "$*"; echo; du -sh "$arcname".7z; }
# local IFS="_";
c() { a=wd${1}; cd ${!a}; }
rl() { rp=$(realpath "$*");
    { [[ -d $rp ]] && cd "$rp"; } ||
    { [[ -f $rp ]] && cd $(dirname "$rp"); } ||
        echo "No such file or dir path!"; }
fl() { cat "$sh"/rs/1linux | fzf; }
x() { xdg-open "$*" &> /dev/null & disown; }
get_space_used() { df -BMB "$1" --output=used | tail -1 | grep -o '[0-9]*'; }
hddsum() { d1=$(get_space_used /ln/mo/blink); d2=$(get_space_used /ln/mo/metal); echo Σ= "$(( d1 + d2 ))" Mb; }
fkill() { ps -ef | sed 1d | fzf -e -m | awk '{print $2}' | xargs kill -${1:-9}; }
vol() { pactl set-sink-volume 0 "$1"%; }
glog() { git for-each-ref --sort=committerdate refs/heads/ --format='%(HEAD) %(color:yellow)%(refname:short)%(color:reset) - %(color:red)%(objectname:short)%(color:reset) - %(contents:subject) - %(authorname) (%(color:green)%(committerdate:relative)%(color:reset))'; }
gnome_box() { killall gnome-boxes; killall libvirtd; virsh -c qemu:///session pool-list --all; virsh -c qemu:///session pool-destroy gnome-boxes;  virsh -c qemu:///session pool-undefine gnome-boxes; rm -rf .local/share/gnome-boxes; rm -rf .config/libvirt; }
#
if [ -x /bin/dhclient ] || [ -x /usr/sbin/dhclient ]; then dhc_call=dhclient; fi
[ -x /bin/dhcpcd ] && dhc_call=dhcpcd
type -f conn &>/dev/null && conn() { sudo /usr/bin/conn; } || conn() { w=$(ip link | grep "wlp\|wlan" | cut -f 2 -d ':' | cut -b 2-); [ -z $w ] && ( echo "No wlan present"; pgrep $dhc_call || sudo $dhc_call ) || ( sudo wpa_supplicant -B -i $w -c /secr.conf && sudo $dhc_call $w ); }
type -f dconn &>/dev/null || dconn() { sudo killall -v wpa_supplicant; sudo killall -v dhcpcd; }
function launch { nohup $1 >/dev/null 2>/dev/null & disown; }

# Find files by name with ripgrep
rgf() {
    if [ -z "$1" ]; then
        echo "Usage: rgf [dir] filename-to-search-for"
    else
        if [ -z "$2" ]; then
            rg --files | rg "$1"
        else
            rg --files "$2" | rg "$1"
        fi
    fi
}

# Ease xdg-mime routine
xdgsane() {
    if [ -z "$1" ]; then
        echo Usage: xdgsane path/somefile.ext
    else
        type=$( xdg-mime query filetype "$1" )
        echo Mime filetype for \""$1"\" is \""$type"\"
        echo -e "Available apps for it are \n$(grep $type /usr/share/applications/mimeinfo.cache | cut -d '=' -f2- | tr ';' '\n')"
        echo Hint: Call \"xdg-mime default ***.desktop $type\" to set the default app
        if [[ $ARG =~ DMENU ]]; then
            source "$sh"/dmenurc
            app=$(grep $type /usr/share/applications/mimeinfo.cache | cut -d '=' -f2- | tr ';' '\n' | tr -s '\n' | dmenuy -p "Choose default app for $type")
            [[ $ARG =~ SAVE ]] && ! [[ -z $app ]] && xdg-mime default $app $type
            [[ $ARG =~ RUN ]] && ! [[ -z $app ]] && xdg-open "$1"
        fi
    fi
}

# This does mirror my dotfiles to remote git, thanks I am the only developer in the project =))
gsync() {
(
    cd $(realpath "$sh"); pwd
    git add .
    git commit -a -m another | grep '[^[:blank:]]' --color=none
    git pull
    if  git status | grep -q "publish your local"; then
        git push
    fi
    # echo
    # cd ~/moment/4gist/; pwd
    # git add .
    # git commit -a -m newnote | grep '[^[:blank:]]' --color=none
    # git pull; git push;
)
}

# If not running interactively, don't do anything
[[ $- != *i* ]] && return

# FZF #
# [ -f /usr/share/doc/fzf/examples/key-bindings.bash ] && source /usr/share/doc/fzf/examples/key-bindings.bash
# [ -f /usr/share/fzf/key-bindings.bash ] && source /usr/share/fzf/key-bindings.bash
[[ -f "$git/nvpl/fzf/shell/key-bindings.bash" ]] && type -f fzf &>/dev/null &&
    source "$git/nvpl/fzf/shell/key-bindings.bash"
[[ -d $git/nvpl/fzf/bin ]] && [[ ! "$PATH" == */nvpl/fzf/bin* ]] &&
    export PATH="${PATH:+${PATH}:}$git/nvpl/fzf/bin"
[[ $- == *i* ]] && [[ -f $git/nvpl/fzf/shell/completion.bash ]] &&
    source "$git/nvpl/fzf/shell/completion.bash" 2> /dev/null
export FZF_DEFAULT_OPTS="--exact --layout=reverse --height 45%"
export FZF_CTRL_R_OPTS="--no-sort --exact"
# Restore default <C-r> search
    # bind -X "\C-r: reverse-search-history"
function fzfpacadd { pacman -Slq | fzf --multi --preview 'pacman -Si {1}' | xargs -ro sudo pacman -S; }
function fzfpacrem { pacman -Qq | fzf --multi --preview 'pacman -Qi {1}' | xargs -ro sudo pacman -Rns; }
__fzf_1linux__() {
  local output
  output=$(
    cat "$sh"/rs/1linux | fzf
    ) || return
  READLINE_LINE=${output}
  # READLINE_LINE="more"
  if [[ -z "$READLINE_POINT" ]]; then
    echo "$READLINE_LINE"
  else
    READLINE_POINT=0x7fffffff
  fi
}
bind -m emacs-standard -x '"\e\C-f": __fzf_1linux__'
fzflocate() {
  local output
  output=$(
    locate -i $* | fzf
    ) || return
  echo "$output"
}

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# don't put duplicate lines or lines starting with space in the history.
HISTCONTROL=ignoreboth

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# append to the history file, don't overwrite it
shopt -s histappend

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# # set a fancy prompt (non-color, unless we know we "want" color)
case $TERM in xterm-color|*-256color|xterm-kitty)
    color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
        # We have color support; assume it's compliant with Ecma-48
        # (ISO/IEC-6429). (Lack of such support is extremely rare, and such
        # a case would tend to support setf rather than setaf.)
        color_prompt=yes
    else
        color_prompt=
    fi
fi

# If this is an xterm set the title to user@host:dir
#case $TERM in
#xterm*|rxvt*)
#    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
#    ;;
#*)
#    ;;
#esac

alias ls='ls --color=auto'
alias grep='grep --color=auto'
alias fgrep='fgrep --color=auto'
alias egrep='egrep --color=auto'

# colored GCC warnings and errors
export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
    if [ -f /usr/share/bash-completion/bash_completion ]; then
        . /usr/share/bash-completion/bash_completion
    elif [ -f /etc/bash_completion ]; then
        . /etc/bash_completion
    fi
fi

# # Use pacmd
# pa-list() { pacmd list-sinks | awk '/index/ || /name:/'; }
# pa-set() {
#     # list all apps in playback tab (ex: cmus, mplayer, vlc)
#     inputs=($(pacmd list-sink-inputs | awk '/index/ {print $2}'))
#     # set the default output device
#     pacmd set-default-sink $1 &> /dev/null
#     # apply the changes to all running apps to use the new output device
#     for i in ${inputs[*]}; do pacmd move-sink-input $i $1 &> /dev/null; done; }
# pa-playbacklist() {
#     # list individual apps
#     echo "==============="
#     echo "Running Apps"
#     pacmd list-sink-inputs | awk '/index/ || /application.name /'
#     # list all sound device
#     echo "==============="
#     echo "Sound Devices"
#     pacmd list-sinks | awk '/index/ || /name:/'; }
# pa-playbackset() {
#     # set the default output device
#     pacmd set-default-sink "$2" &> /dev/null
#     # apply changes to one running app to use the new output device
#     pacmd move-sink-input "$1" "$2" &> /dev/null; }

# export -f upk
# export -f pk

# if ! pgrep -u "$USER" ssh-agent > /dev/null; then
#     # start ssh-agent
#     touch ~/.ssh/.ssh-agent-thing
#     ssh-agent > ~/.ssh/.ssh-agent-thing
# fi
# if [[ ! "$SSH_AUTH_SOCK" ]] && [ -f ~/.ssh/.ssh-agent-thing ]; then
#     eval "$(<~/.ssh/.ssh-agent-thing)" &>/dev/null
#     ssh-add ~/.ssh/*.k &>/dev/null
# fi

# . "$HOME/.cargo/env"

# BEGIN_KITTY_SHELL_INTEGRATION
if test -n "$KITTY_INSTALLATION_DIR" -a -e "$KITTY_INSTALLATION_DIR/shell-integration/bash/kitty.bash"; then source "$KITTY_INSTALLATION_DIR/shell-integration/bash/kitty.bash"; fi
# END_KITTY_SHELL_INTEGRATION

# Integrate z
# source $git/z.sh
[[ -r /usr/share/z/z.sh ]] && source /usr/share/z/z.sh

