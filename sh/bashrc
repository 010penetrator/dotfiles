#!/bin/bash
# ~/.bashrc

# Variables #
export HISTFILESIZE=
export HISTSIZE=9000
[[ $COLORTERM == truecolor ]] && TERM=xterm-256color
[[ $PATH == *"$HOME/.sh"* ]] || export PATH=$PATH:$HOME/.sh
[[ $PATH == *"$HOME/.local/bin"* ]] || export PATH=$PATH:$HOME/.local/bin
export XDG_CONFIG_HOME="$HOME/.config"
export XDG_CONFIG_DIRS=/usr/etc/xdg:/etc/xdg
export GUI_EDITOR=/usr/bin/xed
export EDITOR=vi
command -v  vim &>/dev/null && export EDITOR=vim
command -v nvim &>/dev/null && export EDITOR=nvim
export NVIMSERV=/tmp/neovimrpc
export VIMSERV=VIMSERV
export PAGER=less
export BROWSER=firefox
export sh=/ln/sh
export lo=/ln/lo
export bak=/ln/mo/blink/bak
export MANWIDTH=80
export LSBLK=lsblk
export OVMF=/usr/share/edk2-ovmf/x64/OVMF_CODE.fd 

export TERMINAL=xterm
command -v kitty &>/dev/null && export TERMINAL=kitty
[[ "$TERMINAL" == "kitty" ]] && [[ $HIDPI == "1" ]] && export TERMINAL="kitty -o font_size=14.2 -o initial_window_width=1140 -o initial_window_height=900"
#
#PS1='[\u@\h \W]\$ '
#PS1='\[\033[01;32m\]\u@\h\[\033[01;34m\] \w \$\[\033[00m\]'
#PS1="\[$(tput bold)\]\[$(tput setaf 7)\]┌[\d][\t][\u@\h][\W]\n└\$ \[$(tput sgr0)\]"
#PS1='\[\033[01;32m\]☿\[\e[38m\]\[\033[00m\] \w\[\e[m\] \[\033[01;34m\]\$\[\033[00m\] '
#PS1=$'\[$(tput bold)\]\[$(tput setaf 2)\]\xe2\x98\xbf[\W]\$ \[$(tput sgr0)\]'
#PS1=$'\[$(tput bold)\]\[$(tput setaf 46)\]\u \W \$ \[$(tput sgr0)\]'
# PS1=$'\[$(tput bold)\]\[$(tput setaf 113)\]\u\[$(tput setaf 2)\] \W \$ \[$(tput sgr0)\]'
#PS1='\[\e]0;\w\a\]\n\[\e[32m\]\u@\h \[\e[33m\]\w\[\e[0m\]\n\$'
#PS1="\[\e]0;\h: \a\]$PS1"
PS1=$'\[$(tput bold)\]\[$(tput setaf 34)\]\u\[$(tput setaf 78)\] \W \[$(tput setaf 34)\]\$ \[$(tput sgr0)\]'

# Aliases #
alias bb='terminusfont ; tty | grep -q /dev/tty && sudo /./bin/conn & startx /ln/sh/xinitrc bspwm'
alias gs='( [ -f $HOME/.env ] && . $HOME/.env ; gsync )'
alias yp='fc -ln -1 | cut -c 3- | xclip ; echo yanked prev command'
alias ram='sudo python $sh/mem.py'
alias chmodre='find . -type f -exec chmod 644 {} \;'
alias terfont='setfont ter-218b'
alias dmenu='dmenu $DMENU_OPTIONS -fn "$DMENU_FN"'
alias 1l='less ~/.sh/1linux'
alias vf='$TERMINAL -e vifm . &'
# alias trmclient='title transmission-remote-cli; transmission-remote-cli -c localhost:9090 ; title bash'
alias as='apt search'
alias ai='sudo apt install'
alias l='$LSBLK -f'
alias lb='$LSBLK -o NAME,LABEL,MOUNTPOINT,SIZE,FSUSE% | grep "sd\|nvme" --color=none'
alias lm='$LSBLK -o NAME,FSTYPE,LABEL,SIZE,MOUNTPOINT'
alias m='df -BMB'
amou() { target=$( $LSBLK -f | grep -e ".sd\|.nvme" | fzf -e | cut -f 1 -d " " | tr -cd '[:alnum:]' ); [ ! -z "${target}" ] && udevil mount /dev/"$target" && echo "/dev/$target mounted" || echo 'No target.' ; }
aumo() { target=$( $LSBLK -f | grep -e ".sd\|.nvme" | grep '/' | cut -c 7- | fzf -e |  cut -f 1 -d ' ' ); mopoi=$( mount | grep "${target}" | cut -f 3 -d ' ' ); [ ! -z "${target}" ] && sync "$mopoi" && udevil umount "/dev/$target" && echo "/dev/$target unmounted from $mopoi" || echo 'No target.' ; }
# title() { echo -ne "\e]0;$*\a"; }
title() { echo -ne "\033]0;$*\007"; }
alias leto='date +%Y-%m-%d'
alias p='ps aux | grep -v grep | grep'
alias dropcs='sync && echo 3 | sudo tee /proc/sys/vm/drop_caches'

# Functions #
zz() { du -csh $*; local IFS="_"; filename=$(echo "$*" | tr / _); tar -I 'zstd -10 -T0' -cf "$filename".tar.zst --exclude='.git' --exclude='tags' $*; du -sh "$filename".tar.zst; }
x() { xdg-open "$*" &> /dev/null & disown ; } 
get_space_used() { df -BMB "$1" --output=used | tail -1 | grep -o '[0-9]*' ; }
hddsum() { d1=$(get_space_used /ln/mo/blink) ; d2=$(get_space_used /ln/mo/metal) ; echo Σ= "$(( d1 + d2 ))" Mb ; }
fkill() {  ps -ef | sed 1d | fzf -e -m | awk '{print $2}' | xargs kill -${1:-9} ; }
vol() { pactl set-sink-volume 0 "$1"% ; }
gnome_box() { killall gnome-boxes ; killall libvirtd ; virsh -c qemu:///session pool-list --all ; virsh -c qemu:///session pool-destroy gnome-boxes ;  virsh -c qemu:///session pool-undefine gnome-boxes ; rm -rf .local/share/gnome-boxes ; rm -rf .config/libvirt ; }
#
if [ -x /bin/dhclient ] || [ -x /usr/sbin/dhclient ] ; then dhc_call=dhclient ; fi
[ -x /bin/dhcpcd ] && dhc_call=dhcpcd
type -f conn &>/dev/null && conn() { sudo /usr/bin/conn ; } || conn() { w=$(ip link | grep "wlp\|wlan" | cut -f 2 -d ':' | cut -b 2-) ; [ -z $w ] && ( echo "No wlan present" ; pgrep $dhc_call || sudo $dhc_call ) || ( sudo wpa_supplicant -B -i $w -c /secr.conf && sudo $dhc_call $w ) ; }
type -f dconn &>/dev/null || dconn() { sudo killall -v wpa_supplicant; sudo killall -v dhcpcd; }
function launch { nohup $1 >/dev/null 2>/dev/null & disown; }

rgf() {
  if [ -z "$2" ]
  then
      rg --files | rg "$1"
  else
      rg --files "$2" | rg "$1"
  fi
}

gsync() {
  (
  cd ~/moment/dotfiles/ ; pwd
  git add .
  git commit -a -m another | grep '[^[:blank:]]' --color=none
  git pull ; git push
  echo
  # cd ~/moment/4gist/ ; pwd
  # git add .
  # git commit -a -m newnote | grep '[^[:blank:]]' --color=none
  git pull ; git push ;
  )
}

# FZF #
[ -f /usr/share/doc/fzf/examples/key-bindings.bash ] && source /usr/share/doc/fzf/examples/key-bindings.bash
[ -f /usr/share/fzf/key-bindings.bash ] && source /usr/share/fzf/key-bindings.bash
[ -f "$HOME/moment/fzf/shell/key-bindings.bash" ] && source "$HOME/moment/fzf/shell/key-bindings.bash"
[[ ! "$PATH" == */moment/fzf/bin* ]] && export PATH="${PATH:+${PATH}:}/$HOME/moment/fzf/bin"
[[ $- == *i* ]] && source "$HOME/moment/fzf/shell/completion.bash" 2> /dev/null
export FZF_DEFAULT_OPTS="--exact --layout=reverse --height 55%"
export FZF_CTRL_R_OPTS="--no-sort --exact"
# Restore default <C-r> search
# bind -X "\C-r: reverse-search-history" 
function fzfpacadd { pacman -Slq | fzf --multi --preview 'pacman -Si {1}' | xargs -ro sudo pacman -S ; }
function fzfpacrem { pacman -Qq | fzf --multi --preview 'pacman -Qi {1}' | xargs -ro sudo pacman -Rns ; }

# If not running interactively, don't do anything
[[ $- != *i* ]] && return

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# don't put duplicate lines or lines starting with space in the history.
HISTCONTROL=ignoreboth

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# append to the history file, don't overwrite it
shopt -s histappend

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# # set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in xterm-color|*-256color|xterm-kitty)
  color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
  # We have color support; assume it's compliant with Ecma-48
  # (ISO/IEC-6429). (Lack of such support is extremely rare, and such
  # a case would tend to support setf rather than setaf.)
  color_prompt=yes
    else
  color_prompt=
    fi
fi

# If this is an xterm set the title to user@host:dir
#case "$TERM" in
#xterm*|rxvt*)
#    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
#    ;;
#*)
#    ;;
#esac

alias ls='ls --color=auto'
alias grep='grep --color=auto'
alias fgrep='fgrep --color=auto'
alias egrep='egrep --color=auto'

# colored GCC warnings and errors
export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

# # Use pacmd
# pa-list() { pacmd list-sinks | awk '/index/ || /name:/'; }
# pa-set() {
#     # list all apps in playback tab (ex: cmus, mplayer, vlc)
#     inputs=($(pacmd list-sink-inputs | awk '/index/ {print $2}'))
#     # set the default output device
#     pacmd set-default-sink $1 &> /dev/null
#     # apply the changes to all running apps to use the new output device
#     for i in ${inputs[*]}; do pacmd move-sink-input $i $1 &> /dev/null; done; }
# pa-playbacklist() {
#     # list individual apps
#     echo "==============="
#     echo "Running Apps"
#     pacmd list-sink-inputs | awk '/index/ || /application.name /'
#     # list all sound device
#     echo "==============="
#     echo "Sound Devices"
#     pacmd list-sinks | awk '/index/ || /name:/'; }
# pa-playbackset() {
#     # set the default output device
#     pacmd set-default-sink "$2" &> /dev/null
#     # apply changes to one running app to use the new output device
#     pacmd move-sink-input "$1" "$2" &> /dev/null; }

# export -f upk
# export -f pk

# if ! pgrep -u "$USER" ssh-agent > /dev/null; then
#   # start ssh-agent
#   touch ~/.ssh/.ssh-agent-thing
#   ssh-agent > ~/.ssh/.ssh-agent-thing
# fi
# if [[ ! "$SSH_AUTH_SOCK" ]] && [ -f ~/.ssh/.ssh-agent-thing ] ; then
#   eval "$(<~/.ssh/.ssh-agent-thing)" &>/dev/null
#   ssh-add ~/.ssh/*.k &>/dev/null
# fi

# . "$HOME/.cargo/env"

# BEGIN_KITTY_SHELL_INTEGRATION
if test -n "$KITTY_INSTALLATION_DIR" -a -e "$KITTY_INSTALLATION_DIR/shell-integration/bash/kitty.bash"; then source "$KITTY_INSTALLATION_DIR/shell-integration/bash/kitty.bash"; fi
# END_KITTY_SHELL_INTEGRATION

[ -f /ln/lo/bashrc.local ] && source /ln/lo/bashrc.local

