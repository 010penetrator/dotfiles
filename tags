!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
$FZF_DEFAULT_OPTS	sh/vi/init.vim	/^let $FZF_DEFAULT_OPTS='--exact --layout=reverse'$/;"	v
$RTP	sh/vi/init.vim	/^let $RTP=split(&runtimepath, ',')[0]$/;"	v
*	sh/vi/init.vim	/^nnoremap <silent> * :<C-u>execute "keepjumps norm! " . v:count1 . "*"<CR>$/;"	m
,,c	sh/vi/init.vim	/^nnoremap ,,c :NewVifmHere<CR>$/;"	m
,,o	sh/vi/init.vim	/^nnoremap ,,o ^y$:call system('xdg-open ' . "'" . @" . "' &")<CR>$/;"	m
,,o	sh/vi/init.vim	/^vnoremap ,,o :<C-U>call SystemOpenEveryLine()<CR>$/;"	m
,,q	sh/vi/init.vim	/^nnoremap ,,q :call SaveColor() <bar> SSave! comon <bar> qa<CR>$/;"	m
,,s	sh/vi/init.vim	/^nnoremap ,,s :call SaveColor() <bar> SSave! comon<CR>$/;"	m
,,t	sh/vi/init.vim	/^nnoremap ,,t :NewTermHere<CR>$/;"	m
,,v	sh/vi/init.vim	/^nnoremap ,,v :Goyo<CR>$/;"	m
,.	sh/vi/init.vim	/^nnoremap <silent> ,. :if bufexists(bufnr('#')) <bar> b # <bar> echo expand('%') <bar> else <bar> echo 'No prev buffer.' <bar> endif<CR>$/;"	m
,/	sh/vi/init.vim	/^nnoremap ,\/ :Telescope find_files search_dirs=$sh,$tt<CR>$/;"	m
,;	sh/vi/init.vim	/^nnoremap ,; :6mes<CR>$/;"	m
,<tab>	sh/vi/init.vim	/^map ,<tab> :emenu tagi.<tab>$/;"	m
,B	sh/vi/init.vim	/^nnoremap ,B yap: exec "!" . @" <CR>$/;"	m
,C	sh/vi/init.vim	/^nnoremap ,C :Silent xdg-open %:p:h &<CR>$/;"	m
,M	sh/vi/init.vim	/^nnoremap ,M ^y$:call system('firefox ' . "'" . @" . "' &")<CR>$/;"	m
,O	sh/vi/init.vim	/^nnoremap ,O :Silent xdg-open %:p &<CR>$/;"	m
,V	sh/vi/init.vim	/^nnoremap ,V :source $MYVIMRC <CR>$/;"	m
,a.	sh/vi/init.vim	/^nnoremap ,a. :exec '! virpc "%:p"' \\| q <CR>$/;"	m
,aa	sh/vi/init.vim	/^nnoremap ,aa :silent exec '! virpc "%:p"' <CR>$/;"	m
,ac	sh/vi/init.vim	/^nnoremap ,ac :exec '! MODE=cur    virpc "%:p"' \\| q <CR>$/;"	m
,an	sh/vi/init.vim	/^nnoremap ,an :exec '! MODE=newtab virpc "%:p"' \\| q <CR>$/;"	m
,ar	sh/vi/init.vim	/^nnoremap ,ar :call AddRpcEar()<CR>$/;"	m
,as	sh/vi/init.vim	/^nnoremap ,as :exec '! MODE=split  virpc "%:p"' \\| q <CR>$/;"	m
,b	sh/vi/init.vim	/^vnoremap ,b :call RunSelBash()<CR>$/;"	m
,bd	sh/vi/init.vim	/^nnoremap ,bd :BDnJump<CR>$/;"	m
,be	sh/vi/init.vim	/^nnoremap ,be :BufExplorer<CR>$/;"	m
,bi	sh/vi/init.vim	/^nnoremap ,bi :Unite buffer file<CR>i$/;"	m
,bj	sh/vi/init.vim	/^nnoremap ,bj :Unite buffer file<CR>$/;"	m
,bk	sh/vi/init.vim	/^nnoremap ,bk :Denite buffer -mode=normal -immediately-1<CR>$/;"	m
,bl	sh/vi/init.vim	/^nnoremap ,bl :Telescope buffers theme=ivy<CR>$/;"	m
,bp	sh/vi/init.vim	/^nnoremap ,bp :call BufPut()<CR>$/;"	m
,by	sh/vi/init.vim	/^nnoremap ,by :call BufYank()<CR>$/;"	m
,c,	sh/vi/init.vim	/^nnoremap <silent> ,c, :call GetProjDir() <bar> exec "lcd " . b:proj_dir <bar> echo 'lcd @' getcwd() <cr>$/;"	m
,c.	sh/vi/init.vim	/^nnoremap ,c. :LCDhere <CR>$/;"	m
,cf	sh/vi/init.vim	/^nnoremap ,cf :set opfunc=FoldMotion<cr>g@$/;"	m
,cf	sh/vi/init.vim	/^vnoremap ,cf :<C-U>call FoldSelection()<CR>$/;"	m
,cg	sh/vi/init.vim	/^nnoremap ,cg :call ClimbToDirWhere(".git\/index",1) \\| pwd <CR>$/;"	m
,cm	sh/vi/init.vim	/^nnoremap ,cm :call ClimbToDirWhere("Makefile",1) \\| pwd <CR>$/;"	m
,cs	sh/vi/init.vim	/^nnoremap ,cs :LoadColor<CR>$/;"	m
,d	sh/vi/init.vim	/^nnoremap ,d :bd!<CR>$/;"	m
,g,	sh/vi/init.vim	/^nnoremap ,g, :call FocusBufOrDo('vimrc$','e $MYVIMRC')<CR>$/;"	m
,g2	sh/vi/init.vim	/^nnoremap ,g2 :call FocusBufOrDo('bspwm$','e $sh\/bspwmrc')<CR>$/;"	m
,gB	sh/vi/init.vim	/^nnoremap ,gB :call FocusBufOrDo('bashrc.local','e $lo\/bashrc.local')<CR>$/;"	m
,gb	sh/vi/init.vim	/^nnoremap ,gb :call FocusBufOrDo('bashrc','e $sh\/bashrc')<CR>$/;"	m
,gg	sh/vi/init.vim	/^nnoremap ,gg :GitGutterToggle<CR>$/;"	m
,gh	sh/vi/init.vim	/^nnoremap ,gh :call FocusBufOrDo('sh_history','e $HOME\/.bash_history')<CR>G$/;"	m
,gi	sh/vi/init.vim	/^nnoremap ,gi :call FocusBufOrDo('init.lua','e $sh\/vi\/init.lua')<CR>$/;"	m
,gk	sh/vi/init.vim	/^nnoremap ,gk :call FocusBufOrDo('kitty.conf','e $sh\/conf\/kitty.conf')<CR>$/;"	m
,gl	sh/vi/init.vim	/^nnoremap ,gl :call FocusBufOrDo('1linux','e $sh\/rs\/1linux')<CR>$/;"	m
,go	sh/vi/init.vim	/^nnoremap ,go ^y$:call system('google.sh ' . "'" . @" . "'")<CR>$/;"	m
,gr	sh/vi/init.vim	/^nnoremap ,gr :call FocusBufOrDo('rc.sh','e $sh\/rc.sh')<CR>$/;"	m
,gt	sh/vi/init.vim	/^nnoremap ,gt :call FocusBufOrDo('vimrc_themes','e $sh\/vi\/vimrc_themes')<CR>$/;"	m
,gu	sh/vi/init.vim	/^nnoremap ,gu :call FocusBufOrDo('ff','e $tt\/u*\/ff*')<CR>$/;"	m
,gv	sh/vi/init.vim	/^nnoremap ,gv :call FocusBufOrDo('init.vim','e $sh\/vi\/init.vim')<CR>$/;"	m
,gx	sh/vi/init.vim	/^nnoremap ,gx :call FocusBufOrDo('sxhkd','e $sh\/conf\/sxhkdrc')<CR>$/;"	m
,gy	sh/vi/init.vim	/^nnoremap ,gy ^y$:call system('yandex.sh ' . "'" . @" . "'")<CR>$/;"	m
,gz	sh/vi/init.vim	/^nnoremap ,gz :call FocusBufOrDo('zzzz','e $tt\/zzzzzz')<CR>$/;"	m
,i	sh/vi/init.vim	/^nnoremap ,i :diffthis \\| wincmd w<CR>$/;"	m
,l	sh/vi/init.vim	/^nnoremap ,l :Startify<CR>$/;"	m
,n	sh/vi/init.vim	/^nnoremap ,n :call RaiseNetRW()<CR>$/;"	m
,o	sh/vi/init.vim	/^nnoremap ,o :diffoff  \\| wincmd w<CR>$/;"	m
,q	sh/vi/init.vim	/^nnoremap ,q :qa <CR>$/;"	m
,tb	sh/vi/init.vim	/^nnoremap ,tb <cmd>lua require('telescope.builtin').current_buffer_fuzzy_find(require('telescope.themes').get_ivy{})<CR>$/;"	m
,tf	sh/vi/init.vim	/^nnoremap ,tf :Telescope find_files theme=ivy<CR>$/;"	m
,tg	sh/vi/init.vim	/^nnoremap ,tg :Telescope live_grep<CR>$/;"	m
,to	sh/vi/init.vim	/^nnoremap ,to :Telescope oldfiles<CR>$/;"	m
,tr	sh/vi/init.vim	/^nnoremap ,tr :Telescope lsp_references<CR>$/;"	m
,v,	sh/vi/init.vim	/^nnoremap ,v, :call EvalThis()<CR>$/;"	m
,v;	sh/vi/init.vim	/^nnoremap ,v; :let lastl=line('.') <bar> exec "normal yap" <bar> @\\" <bar> exec lastl<CR>:echo "Evaluated current paragraph."<CR>$/;"	m
,v<CR>	sh/vi/init.vim	/^nnoremap ,v<CR> yap:@"<CR>:<up><CR>$/;"	m
,vb	sh/vi/init.vim	/^nnoremap ,vb :call SwitchBackground() <CR>:echo "background=" &background <cr>$/;"	m
,vg	sh/vi/init.vim	/^nnoremap ,vg :set termguicolors! <cr>:set termguicolors? <cr>$/;"	m
,vl	sh/vi/init.vim	/^nnoremap ,vl yy:@"<CR>$/;"	m
,vp	sh/vi/init.vim	/^nnoremap ,vp :put + <bar> exec "normal dfmxIPlug 'A'" <CR>==$/;"	m
,vq	sh/vi/init.vim	/^nnoremap ,vq :qa! <CR>$/;"	m
,vs	sh/vi/init.vim	/^nnoremap ,vs :source $RTP\/session\/comon <bar> call AddRpcEar()<CR>$/;"	m
,vt	sh/vi/init.vim	/^nnoremap ,vt :TagbarOpen fj <CR>$/;"	m
,vu	sh/vi/init.vim	/^nnoremap ,vu :source \/ln\/sh\/vi\/init.vim <bar> PlugUpdate <CR>$/;"	m
,vv	sh/vi/init.vim	/^nnoremap ,vv :source $MYVIMRC <CR>$/;"	m
,x	sh/vi/init.vim	/^nnoremap ,x :q<CR>$/;"	m
,z/	sh/vi/init.vim	/^nnoremap ,z\/ :copen<CR>\/error<CR>$/;"	m
,zb	sh/vi/init.vim	/^nnoremap ,zb :call BuildProjectUni("Makefile","make -f my_Makefile bear")<CR>$/;"	m
,zc	sh/vi/init.vim	/^nnoremap ,zc :call BuildProjectUni("Makefile","make -f my_Makefile clean")<CR>$/;"	m
,zc	sh/vi/init.vim	/^nnoremap ,zc :let &colorcolumn=80-&colorcolumn<CR>$/;"	m
,ze	sh/vi/init.vim	/^nnoremap ,ze :call SwitchCE()<CR>$/;"	m
,zf	sh/vi/init.vim	/^nnoremap ,zf :Files<CR>$/;"	m
,zg	sh/vi/init.vim	/^nnoremap ,zg :GFiles<CR>$/;"	m
,zj	sh/vi/init.vim	/^nnoremap ,zj :Files $jo<CR>$/;"	m
,zl	sh/vi/init.vim	/^nnoremap ,zl : silent exec '! echo -e "\\n$(pwd):"; ls -la . ; echo \\. ; ls -la %:p ; read -n 1 -s -r -p "\/\/hit.anykey" ; echo -ne "\\n" ' \\| redraw! <cr>$/;"	m
,zl	sh/vi/init.vim	/^nnoremap ,zl :Lines<CR>$/;"	m
,zm	sh/vi/init.vim	/^nnoremap ,zm :call BuildProjectUni("my_Makefile","make -f my_Makefile")<CR>$/;"	m
,zn	sh/vi/init.vim	/^nnoremap ,zn :set number!<CR>$/;"	m
,zo	sh/vi/init.vim	/^nnoremap ,zo :make <bar> copen <CR>$/;"	m
,zq	sh/vi/init.vim	/^nnoremap ,zq :wa <bar> qa<CR>$/;"	m
,zr	sh/vi/init.vim	/^nnoremap ,zr :Rg<CR>$/;"	m
,zs	sh/vi/init.vim	/^nnoremap ,zs :Files $sh<CR>$/;"	m
,zt	sh/vi/init.vim	/^nnoremap ,zt :Files $tt<CR>$/;"	m
,zx	sh/vi/init.vim	/^nnoremap ,zx :call BuildProjectUni("Makefile","make -f my_Makefile run")<CR>$/;"	m
,zz	sh/vi/init.vim	/^nnoremap ,zz :let &scrolloff=28-&scrolloff<CR>$/;"	m
<A-;>	sh/vi/init.vim	/^nnoremap <silent><A-;> <Cmd>exe v:count1 . "ToggleTerm"<CR>$/;"	m
<A-h>	sh/vi/init.vim	/^    inoremap <A-h> <C-\\><C-N><C-w>h$/;"	m
<A-h>	sh/vi/init.vim	/^    nnoremap <A-h> <C-w>h$/;"	m
<A-j>	sh/vi/init.vim	/^    inoremap <A-j> <C-\\><C-N><C-w>j$/;"	m
<A-j>	sh/vi/init.vim	/^    nnoremap <A-j> <C-w>j$/;"	m
<A-k>	sh/vi/init.vim	/^    inoremap <A-k> <C-\\><C-N><C-w>k$/;"	m
<A-k>	sh/vi/init.vim	/^    nnoremap <A-k> <C-w>k$/;"	m
<A-l>	sh/vi/init.vim	/^    inoremap <A-l> <C-\\><C-N><C-w>l$/;"	m
<A-l>	sh/vi/init.vim	/^    nnoremap <A-l> <C-w>l$/;"	m
<BS>	sh/vi/init.vim	/^nnoremap <silent> <BS>    :exec 'normal! '.float2nr(round(winheight(0)*(exists("b:scrollpart") ? b:scrollpart : g:scrollpart)*0.01)).key15<CR>$/;"	m
<C-@>C	sh/vi/init.vim	/^    nmap <C-@>C :scs find c <C-R>=expand("<cword>")<CR><CR>$/;"	m
<C-@>D	sh/vi/init.vim	/^    nmap <C-@>D :scs find d <C-R>=expand("<cword>")<CR><CR>$/;"	m
<C-@>E	sh/vi/init.vim	/^    nmap <C-@>E :scs find e <C-R>=expand("<cword>")<CR><CR>$/;"	m
<C-@>F	sh/vi/init.vim	/^    nmap <C-@>F :scs find f <C-R>=expand("<cfile>")<CR><CR>$/;"	m
<C-@>G	sh/vi/init.vim	/^    nmap <C-@>G :scs find g <C-R>=expand("<cword>")<CR><CR>$/;"	m
<C-@>I	sh/vi/init.vim	/^    nmap <C-@>I :scs find i ^<C-R>=expand("<cfile>")<CR>$<CR>$/;"	m
<C-@>S	sh/vi/init.vim	/^    nmap <C-@>S :scs find s <C-R>=expand("<cword>")<CR><CR>$/;"	m
<C-@>T	sh/vi/init.vim	/^    nmap <C-@>T :scs find t <C-R>=expand("<cword>")<CR><CR>$/;"	m
<C-@>c	sh/vi/init.vim	/^    nmap <C-@>c :cs find c <C-R>=expand("<cword>")<CR><CR>$/;"	m
<C-@>d	sh/vi/init.vim	/^    nmap <C-@>d :cs find d <C-R>=expand("<cword>")<CR><CR>$/;"	m
<C-@>e	sh/vi/init.vim	/^    nmap <C-@>e :cs find e <C-R>=expand("<cword>")<CR><CR>$/;"	m
<C-@>f	sh/vi/init.vim	/^    nmap <C-@>f :cs find f <C-R>=expand("<cfile>")<CR><CR>$/;"	m
<C-@>g	sh/vi/init.vim	/^    nmap <C-@>g :cs find g <C-R>=expand("<cword>")<CR><CR>$/;"	m
<C-@>i	sh/vi/init.vim	/^    nmap <C-@>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>$/;"	m
<C-@>s	sh/vi/init.vim	/^    nmap <C-@>s :cs find s <C-R>=expand("<cword>")<CR><CR>$/;"	m
<C-@>t	sh/vi/init.vim	/^    nmap <C-@>t :cs find t <C-R>=expand("<cword>")<CR><CR>$/;"	m
<C-Down>	sh/vi/init.vim	/^nnoremap <C-Down> :cnext<CR>$/;"	m
<C-PageDown>	sh/vi/init.vim	/^nnoremap <C-PageDown> gt$/;"	m
<C-PageUp>	sh/vi/init.vim	/^nnoremap <C-PageUp> gT$/;"	m
<C-U>	sh/vi/init.vim	/^inoremap <C-U> <C-G>u<C-U>$/;"	m
<C-Up>	sh/vi/init.vim	/^nnoremap <C-Up> :cprev<CR>$/;"	m
<C-W>S	sh/vi/init.vim	/^nnoremap <C-W>S :vsplit<CR>$/;"	m
<C-\>	sh/vi/init.vim	/^nnoremap <C-\\> <C-W>w$/;"	m
<C-a>	sh/vi/init.vim	/^cnoremap <C-a> <Home>$/;"	m
<C-b>	sh/vi/init.vim	/^cnoremap <C-b> <C-Left>$/;"	m
<C-c>	sh/vi/init.vim	/^nmap <C-c> <C-y>$/;"	m
<C-e>	sh/vi/init.vim	/^imap <C-e> <C-o>A$/;"	m
<C-e>	sh/vi/init.vim	/^noremap <C-e> 3<C-e>$/;"	m
<C-l>	sh/vi/init.vim	/^imap <C-l> <Right>$/;"	m
<C-t>	sh/vi/init.vim	/^cnoremap <C-t> <C-Right>$/;"	m
<C-y>	sh/vi/init.vim	/^noremap <C-y> 3<C-y>$/;"	m
<Down>	sh/vi/init.vim	/^inoremap <Down> <C-o>gj$/;"	m
<Down>	sh/vi/init.vim	/^nnoremap <Down> gj$/;"	m
<Down>	sh/vi/init.vim	/^vnoremap <Down> gj$/;"	m
<F2>	sh/vi/init.vim	/^nnoremap <F2> [czz$/;"	m
<F3>	sh/vi/init.vim	/^nnoremap <F3> ]czz$/;"	m
<Space>	sh/vi/init.vim	/^nnoremap <silent> <Space> :exec 'normal! '.float2nr(round(winheight(0)*(exists("b:scrollpart") ? b:scrollpart : g:scrollpart)*0.01))."<C-d>"<CR>$/;"	m
<Up>	sh/vi/init.vim	/^inoremap <Up>   <C-o>gk$/;"	m
<Up>	sh/vi/init.vim	/^nnoremap <Up>   gk$/;"	m
<Up>	sh/vi/init.vim	/^vnoremap <Up>   gk$/;"	m
<c-j>	sh/vi/init.vim	/^map <c-j> <Plug>(edgemotion-j)$/;"	m
<c-k>	sh/vi/init.vim	/^map <c-k> <Plug>(edgemotion-k)$/;"	m
<c-n>	sh/vi/init.vim	/^noremap <c-n> 12<c-e>$/;"	m
<c-p>	sh/vi/init.vim	/^noremap <c-p> 12<c-y>$/;"	m
AddRpcEar	sh/vi/init.vim	/^function! AddRpcEar()$/;"	f
BACKLIT	sh/conf/qmk_planckR4keymap.c	/^  BACKLIT,$/;"	e	enum:planck_keycodes	file:
BACKLIT	sh/conf/qmk_planckR6keymap.c	/^  BACKLIT,$/;"	e	enum:planck_keycodes	file:
BDnJump	sh/vi/init.vim	/^command! BDnJump call BDnJump()$/;"	c
BDnJump	sh/vi/init.vim	/^function! BDnJump()$/;"	f
Bash	sh/vi/init.vim	/^command! Bash exec 'silent ! bash' | redraw!$/;"	c
BufD	sh/vi/init.vim	/^command! BufD call fzf#run(fzf#wrap({$/;"	c
BufFocusedThenDo	sh/vi/init.vim	/^function! BufFocusedThenDo(name,cmd)$/;"	f
BufPut	sh/vi/init.vim	/^function! BufPut()$/;"	f
BufYank	sh/vi/init.vim	/^function! BufYank()$/;"	f
BuildProject1	sh/vi/init.vim	/^function! BuildProject1()$/;"	f
BuildProjectUni	sh/vi/init.vim	/^function! BuildProjectUni(Makefile,Makecommand)$/;"	f
C	sh/vi/init.vim	/^noremap C "_C$/;"	m
COLEMAK	sh/conf/qmk_planckR4keymap.c	/^  COLEMAK,$/;"	e	enum:planck_keycodes	file:
COLEMAK	sh/conf/qmk_planckR6keymap.c	/^  COLEMAK,$/;"	e	enum:planck_keycodes	file:
Call	sh/vi/init.vim	/^command! Call %d _ | put!$/;"	c
Chrome	sh/vi/init.vim	/^  command! Chrome :silent exec '!source \/c\/Users\/user\/.bashrc && chrome "%"' | redraw!$/;"	c
CleanEmptyBuffers	sh/vi/init.vim	/^function! CleanEmptyBuffers()$/;"	f
ClimbToDirWhere	sh/vi/init.vim	/^function! ClimbToDirWhere(filename,chdir)$/;"	f
Cond	sh/vi/init.vim	/^function! Cond(cond, ...)$/;"	f
DVORAK	sh/conf/qmk_planckR4keymap.c	/^  DVORAK,$/;"	e	enum:planck_keycodes	file:
DVORAK	sh/conf/qmk_planckR6keymap.c	/^  DVORAK,$/;"	e	enum:planck_keycodes	file:
Dall	sh/vi/init.vim	/^command! Dall %d _$/;"	c
DelSpace	sh/vi/init.vim	/^function! DelSpace()$/;"	f
Delete_buffers	sh/vi/init.vim	/^function! Delete_buffers()$/;"	f
DiffOrig	sh/vi/init.vim	/^command! DiffOrig vert new | set bt=nofile | r # | 0d_ | diffthis$/;"	c
DoOnKey	sh/vi/init.vim	/^function! DoOnKey(keycode,command)$/;"	f
EXT_PLV	sh/conf/qmk_planckR4keymap.c	/^  EXT_PLV$/;"	e	enum:planck_keycodes	file:
EXT_PLV	sh/conf/qmk_planckR6keymap.c	/^  EXT_PLV$/;"	e	enum:planck_keycodes	file:
EvalThis	sh/vi/init.vim	/^function! EvalThis()$/;"	f
ExPut	sh/vi/init.vim	/^command! -nargs=+ -complete=command ExPut call ExPut(<q-args>)$/;"	c
ExPut	sh/vi/init.vim	/^function! ExPut(cmd)$/;"	f
F	sh/vi/init.vim	/^command! F set fileencoding=utf-8 | set fileformat=unix$/;"	c
F_T	sh/conf/qmk_Atreis_keymap.c	5;"	d	file:
Fdel	sh/vi/init.vim	/^command! Fdel :silent exec '!rm %' | redraw! | bd$/;"	c
FilesProj	sh/vi/init.vim	/^command! -bang FilesProj call GetProjDir() <bar> call fzf#vim#files(expand(b:proj_dir), fzf#vim#with_preview({'options': ['--layout=reverse','--info=inline']}), <bang>0)$/;"	c
FocusBufOrDo	sh/vi/init.vim	/^function! FocusBufOrDo(name,cmd)$/;"	f
FocusWindow	sh/vi/init.vim	/^function! FocusWindow(name)$/;"	f
FocusWindowOrDo	sh/vi/init.vim	/^function! FocusWindowOrDo(name,cmd)$/;"	f
FoldMotion	sh/vi/init.vim	/^function! FoldMotion(type)$/;"	f
FoldSelection	sh/vi/init.vim	/^function! FoldSelection()$/;"	f
FollowSymLink	sh/vi/init.vim	/^command! FollowSymLink let b:symlink = expand("%:p") | execute "file " . resolve(expand("%")) | edit$/;"	c
GetProjDir	sh/vi/init.vim	/^function! GetProjDir()$/;"	f
GotoTerm	sh/vi/init.vim	/^function! GotoTerm(arg)$/;"	f
H	sh/vi/init.vim	/^nnoremap <silent> H :<C-u>execute "keepjumps norm! " . v:count1 . "H"<CR>$/;"	m
JbzCppMan	sh/vi/init.vim	/^command! JbzCppMan :call s:JbzCppMan()$/;"	c
JbzCppMan	sh/vi/init.vim	/^function! s:JbzCppMan()$/;"	f
KC_PIPE	sh/conf/qmk_Atreis_keymap.c	6;"	d	file:
KIR	sh/vi/init.vim	/^command! KIR e ++enc=cp1251 | set fileencoding=utf-8 | set fileformat=unix$/;"	c
L	sh/vi/init.vim	/^nnoremap <silent> L :<C-u>execute "keepjumps norm! " . v:count1 . "L"<CR>$/;"	m
LCDhere	sh/vi/init.vim	/^command! LCDhere lcd %:p:h | pwd$/;"	c
LCDrealpath	sh/vi/init.vim	/^command! LCDrealpath let b:cwd = expand("%:p:h") | let b:rcwd = system("realpath " . b:cwd) | exec "lcd " . b:rcwd$/;"	c
LOWER	sh/conf/qmk_planckR4keymap.c	29;"	d	file:
LOWER	sh/conf/qmk_planckR6keymap.c	43;"	d	file:
LO_T	sh/conf/qmk_planckR4keymap.c	32;"	d	file:
LO_T	sh/conf/qmk_planckR6keymap.c	46;"	d	file:
LastToMacro	sh/vi/init.vim	/^command! -nargs=1 LastToMacro exec "let @" . <q-args> . " = \\"i\\" . @. . \\"<Esc>\\""$/;"	c
LightlineReload	sh/vi/init.vim	/^function! LightlineReload(arg)$/;"	f
LineColor	sh/vi/init.vim	/^command! -nargs=? LineColor call LightlineReload('<args>')$/;"	c
LoadColor	sh/vi/init.vim	/^command! -nargs=? LoadColor call SetPhase(<f-args>) <bar> call LoadColor(<f-args>)$/;"	c
LoadColor	sh/vi/init.vim	/^function! LoadColor(...)$/;"	f
M	sh/vi/init.vim	/^nnoremap <silent> M :<C-u>execute "keepjumps norm! " . v:count1 . "M"<CR>$/;"	m
MYKC_000	sh/conf/qmk_planckR4keymap.c	/^    MYKC_000$/;"	e	enum:custom_keycodes	file:
MoveToNextTab	sh/vi/init.vim	/^function! MoveToNextTab()$/;"	f
MoveToPrevTab	sh/vi/init.vim	/^function! MoveToPrevTab()$/;"	f
MyNetrwMapping	sh/vi/init.vim	/^function! MyNetrwMapping()$/;"	f
N	sh/vi/init.vim	/^nnoremap <silent> N :<C-u>execute "keepjumps norm! " . v:count1 . "Nzz"<CR>$/;"	m
NUMER	sh/conf/qmk_planckR4keymap.c	31;"	d	file:
NUMER	sh/conf/qmk_planckR6keymap.c	45;"	d	file:
NU_T	sh/conf/qmk_planckR4keymap.c	34;"	d	file:
NU_T	sh/conf/qmk_planckR6keymap.c	48;"	d	file:
NewTerm	sh/vi/init.vim	/^    command! NewTerm exec 'silent ! mintty.exe &' | redraw!$/;"	c
NewTerm	sh/vi/init.vim	/^command! NewTerm exec 'silent ! $TERMINAL &' | redraw!$/;"	c
NewTermHere	sh/vi/init.vim	/^command! NewTermHere exec 'silent ! cd "%:p:h" && $TERMINAL &' | redraw!$/;"	c
NewVifmHere	sh/vi/init.vim	/^command! NewVifmHere exec 'silent ! $TERMINAL -e vifm --select %:p & ' | redraw!$/;"	c
Npp	sh/vi/init.vim	/^  command! Npp :silent exec '!source \/c\/Users\/user\/.bashrc && npp "%"' | redraw!$/;"	c
PAGESIZE	sh/mem.py	/^PAGESIZE = os.sysconf("SC_PAGE_SIZE") \/ 1024 #KiB$/;"	v
PLOVER	sh/conf/qmk_planckR4keymap.c	/^  PLOVER,$/;"	e	enum:planck_keycodes	file:
PLOVER	sh/conf/qmk_planckR6keymap.c	/^  PLOVER,$/;"	e	enum:planck_keycodes	file:
Parenthise	sh/vi/init.vim	/^function! Parenthise()$/;"	f
Proc	sh/mem.py	/^class Proc:$/;"	c
Q	sh/vi/init.vim	/^nnoremap Q q$/;"	m
QWERTY	sh/conf/qmk_planckR4keymap.c	/^  QWERTY = SAFE_RANGE,$/;"	e	enum:planck_keycodes	file:
QWERTY	sh/conf/qmk_planckR6keymap.c	/^  QWERTY = SAFE_RANGE,$/;"	e	enum:planck_keycodes	file:
RAISE	sh/conf/qmk_planckR4keymap.c	30;"	d	file:
RAISE	sh/conf/qmk_planckR6keymap.c	44;"	d	file:
RA_T	sh/conf/qmk_planckR4keymap.c	33;"	d	file:
RA_T	sh/conf/qmk_planckR6keymap.c	47;"	d	file:
RCbash	sh/vi/init.vim	/^    command! RCbash :exec '!source \/c\/Users\/user\/.bashrc'$/;"	c
RaiseNetRW	sh/vi/init.vim	/^function! RaiseNetRW()$/;"	f
RevealWindowOnTab	sh/vi/init.vim	/^function! RevealWindowOnTab(arg)$/;"	f
RunSelBash	sh/vi/init.vim	/^function! RunSelBash()$/;"	f
SaveColor	sh/vi/init.vim	/^command! -nargs=? SaveColor call SetPhase(<f-args>) <bar> call SaveColor(<f-args>)$/;"	c
SaveColor	sh/vi/init.vim	/^function! SaveColor(...)$/;"	f
SaveNotepad	sh/vi/init.vim	/^augroup SaveNotepad$/;"	a
Sessload	sh/vi/init.vim	/^augroup Sessload$/;"	a
SetPhase	sh/vi/init.vim	/^function! SetPhase(...)$/;"	f
Silent	sh/vi/init.vim	/^command! -nargs=1 Silent exec 'silent !' . <q-args> | exec 'redraw!'$/;"	c
SortParagraphs	sh/vi/init.vim	/^function! SortParagraphs() range$/;"	f
SuE	sh/vi/init.vim	/^command! SuE r !sudo cat %$/;"	c
SuW	sh/vi/init.vim	/^command! SuW w !sudo tee %$/;"	c
Sum	sh/vi/init.vim	/^command! -range Sum :echo eval(substitute(join(getline(<line1>,<line2>),'+'),',','.',"g"))$/;"	c
SwapContentPrevWin	sh/vi/init.vim	/^command! SwapContentPrevWin :call SwapContentPrevWin()$/;"	c
SwapContentPrevWin	sh/vi/init.vim	/^function! SwapContentPrevWin()$/;"	f
SwitchBackground	sh/vi/init.vim	/^function! SwitchBackground()$/;"	f
SwitchCE	sh/vi/init.vim	/^function! SwitchCE()$/;"	f
SystemOpenEveryLine	sh/vi/init.vim	/^function! SystemOpenEveryLine()$/;"	f
TerminalsFuneral	sh/vi/init.vim	/^function! TerminalsFuneral()$/;"	f
UnFollowSymLink	sh/vi/init.vim	/^command! UnFollowSymLink exec 'file ' . b:symlink | edit$/;"	c
UpdCtags	sh/vi/init.vim	/^    command! UpdCtags !ctags.exe -R --exclude=.git --exclude=log --exclude=wutils --c++-kinds=+p --fields=+iaS --extra=+q *$/;"	c
UpdCtags	sh/vi/init.vim	/^command! UpdCtags !ctags -R --exclude=.git --exclude=log --exclude=wutils --c++-kinds=+p --fields=+iaS --extra=+q *$/;"	c
UpdCtagsDirDeps	sh/vi/init.vim	/^function! UpdCtagsDirDeps()$/;"	f
UpdCtagsGit	sh/vi/init.vim	/^function! UpdCtagsGit()$/;"	f
UpdCtagsGitDeps	sh/vi/init.vim	/^function! UpdCtagsGitDeps()$/;"	f
UpdCtagsSudo	sh/vi/init.vim	/^command! UpdCtagsSudo !sudo ctags -R --exclude=.git --exclude=log --exclude=wutils --c++-kinds=+p --fields=+iaS --extra=+q *$/;"	c
WinSwap	sh/vi/init.vim	/^function! WinSwap()$/;"	f
X	sh/vi/init.vim	/^noremap X "_X$/;"	m
XYp	sh/vi/init.vim	/^  command! XYp :silent exec '!source \/c\/Users\/user\/.bashrc && exp "%:p:h" &' | redraw!$/;"	c
Yall	sh/vi/init.vim	/^command! Yall %y "$/;"	c
["<c-a>"] 	sh/vi/init.lua	/^                ["<c-a>"] = function() print("tryitout") end,$/;"	f
[]	sh/vi/init.vim	/^nnoremap [] `[v`]$/;"	m
[e	sh/vi/init.vim	/^nnoremap [e `[$/;"	m
[l	sh/vi/init.vim	/^nnoremap [l :lprev<cr>$/;"	m
[v	sh/vi/init.vim	/^nnoremap [v `<$/;"	m
]e	sh/vi/init.vim	/^nnoremap ]e `]$/;"	m
]l	sh/vi/init.vim	/^nnoremap ]l :lnext<cr>$/;"	m
]v	sh/vi/init.vim	/^nnoremap ]v `>$/;"	m
_ADJUST	sh/conf/qmk_planckR4keymap.c	/^  _ADJUST$/;"	e	enum:planck_layers	file:
_ADJUST	sh/conf/qmk_planckR6keymap.c	/^  _ADJUST$/;"	e	enum:planck_layers	file:
_COLEMAK	sh/conf/qmk_planckR4keymap.c	/^  _COLEMAK,$/;"	e	enum:planck_layers	file:
_COLEMAK	sh/conf/qmk_planckR6keymap.c	/^  _COLEMAK,$/;"	e	enum:planck_layers	file:
_DVORAK	sh/conf/qmk_planckR4keymap.c	/^  _DVORAK,$/;"	e	enum:planck_layers	file:
_DVORAK	sh/conf/qmk_planckR6keymap.c	/^  _DVORAK,$/;"	e	enum:planck_layers	file:
_LOWER	sh/conf/qmk_planckR4keymap.c	/^  _LOWER,$/;"	e	enum:planck_layers	file:
_LOWER	sh/conf/qmk_planckR6keymap.c	/^  _LOWER,$/;"	e	enum:planck_layers	file:
_NUMER	sh/conf/qmk_planckR4keymap.c	/^  _NUMER,$/;"	e	enum:planck_layers	file:
_NUMER	sh/conf/qmk_planckR6keymap.c	/^  _NUMER,$/;"	e	enum:planck_layers	file:
_PLOVER	sh/conf/qmk_planckR4keymap.c	/^  _PLOVER,$/;"	e	enum:planck_layers	file:
_PLOVER	sh/conf/qmk_planckR6keymap.c	/^  _PLOVER,$/;"	e	enum:planck_layers	file:
_QWERTY	sh/conf/qmk_planckR4keymap.c	/^  _QWERTY,$/;"	e	enum:planck_layers	file:
_QWERTY	sh/conf/qmk_planckR6keymap.c	/^  _QWERTY,$/;"	e	enum:planck_layers	file:
_RAISE	sh/conf/qmk_planckR4keymap.c	/^  _RAISE,$/;"	e	enum:planck_layers	file:
_RAISE	sh/conf/qmk_planckR6keymap.c	/^  _RAISE,$/;"	e	enum:planck_layers	file:
__init__	sh/mem.py	/^    def __init__(self):$/;"	m	class:Proc
a	sh/vi/init.vim	/^nnoremap a <Nop>$/;"	m
a-	sh/vi/init.vim	/^nnoremap a-  : split <bar> exec "normal -" <cr>$/;"	m
a/	sh/vi/init.vim	/^nnoremap a\/ :set hlsearch! <CR>$/;"	m
a:	sh/vi/init.vim	/^nnoremap a: :tabe \\| terminal ++kill=term ++curwin bash -c "INVIM=1 vifm #:p:h"<CR>$/;"	m
a;	sh/vi/init.vim	/^nnoremap a; :terminal ++kill=term ++curwin ++close bash -c "INVIM=1 vifm %:p:h"<CR>$/;"	m
a<BS>	sh/vi/init.vim	/^nnoremap a<BS> :checktime<cr>$/;"	m
a<space>	sh/vi/init.vim	/^nmap a<space> ysib<space><space>$/;"	m
a<tab>	sh/vi/init.vim	/^nnoremap a<tab> :wincmd p \\| e <c-r><c-f> <CR>$/;"	m
aB	sh/vi/init.vim	/^nnoremap aB : vnew \\| if isdirectory(expand('#:p:h')) \\| lcd #:p:h \\| endif \\| terminal ++kill=term ++curwin ++norestore <CR>$/;"	m
aC	sh/vi/init.vim	/^nnoremap aC :vertical terminal ++close bash -c "INVIM=1 vifm %:p:h"<CR>$/;"	m
aE	sh/vi/init.vim	/^nnoremap aE :sp <c-r><c-f> <CR>$/;"	m
aI	sh/vi/init.vim	/^nnoremap aI :put! +<CR>$/;"	m
aO	sh/vi/init.vim	/^nnoremap aO o<Esc>:put! +<CR>`[v`]:g\/^$\/d<CR>:noh<CR>$/;"	m
aP	sh/vi/init.vim	/^nnoremap aP :put! *<CR>$/;"	m
aT	sh/vi/init.vim	/^nnoremap aT :-tabe<CR>$/;"	m
a_	sh/vi/init.vim	/^nnoremap a_  :vsplit <bar> exec "normal -" <cr>$/;"	m
aa	sh/vi/init.vim	/^nnoremap aa a$/;"	m
ab	sh/vi/init.vim	/^nnoremap ab : new \\| if isdirectory(expand('#:p:h')) \\| lcd #:p:h \\| endif \\| terminal ++kill=term ++curwin ++norestore <CR>$/;"	m
ac	sh/vi/init.vim	/^nnoremap ac :terminal ++close bash -c "INVIM=1 vifm %:p:h"<CR>$/;"	m
action_get_macro	sh/conf/qmk_XD60keymap.c	/^const macro_t *action_get_macro(keyrecord_t *record, uint8_t id, uint8_t opt) {$/;"	f
ae	sh/vi/init.vim	/^nnoremap ae :vsp <c-r><c-f> <CR>$/;"	m
af	sh/vi/init.vim	/^nnoremap af :exec "normal i".nr2char(getchar())."\\e"<CR>$/;"	m
ag	sh/vi/init.vim	/^nnoremap ag :exec "normal! a".nr2char(getchar())."\\e"<CR>$/;"	m
ai	sh/vi/init.vim	/^nnoremap ai :put  +<CR>$/;"	m
aj	sh/vi/init.vim	/^nnoremap aj    <C-W>w<C-W>_$/;"	m
ak	sh/vi/init.vim	/^nnoremap ak    <C-W>W<C-W>_$/;"	m
am	sh/vi/init.vim	/^nnoremap am \/\\s*\\\/\\\/.*\\\/\\\/$<CR>$/;"	m
an	sh/vi/init.vim	/^nnoremap an :tabe %:p:h <CR>$/;"	m
ao	sh/vi/init.vim	/^nnoremap ao o<Esc>:put! *<CR>`[v`]:g\/^$\/d<CR>:noh<CR>$/;"	m
ap	sh/vi/init.vim	/^nnoremap ap :put  *<CR>$/;"	m
aq	sh/vi/init.vim	/^nnoremap aq    <C-W>_$/;"	m
as	sh/vi/init.vim	/^nnoremap as :wincmd s \\| e %:p:h <CR>$/;"	m
at	sh/vi/init.vim	/^nnoremap at :tabe<CR>$/;"	m
av	sh/vi/init.vim	/^nnoremap av :wincmd v \\| e %:p:h <CR>$/;"	m
aw	sh/vi/init.vim	/^nnoremap aw :w<CR>$/;"	m
ay	sh/vi/init.vim	/^nnoremap ay "+yiW$/;"	m
az	sh/vi/init.vim	/^nnoremap az    <C-W>80-$/;"	m
c	sh/vi/init.vim	/^noremap c "_c$/;"	m
c<CR>	sh/vi/init.vim	/^nnoremap c<CR> }:if (line(".") == line("$")) \\| exec "normal o" \\| endif<CR>O$/;"	m
c<space>	sh/vi/init.vim	/^nnoremap c<space> :echo expand ('%') '.@.' getcwd() <CR>$/;"	m
cO	sh/vi/init.vim	/^nnoremap cO "_ciw<c-r>+<esc>$/;"	m
c_comment_strings	sh/vi/init.vim	/^    let c_comment_strings=1$/;"	v
callback 	sh/conf/luakit/userconf.lua	/^                    callback = function (_, err)$/;"	f
cm	sh/vi/init.vim	/^nnoremap cm O<Esc>o$/;"	m
cmd_with_count	sh/mem.py	/^def cmd_with_count(cmd, count):$/;"	f
co	sh/vi/init.vim	/^nnoremap co "_ciw<c-r>*<esc>$/;"	m
cp	sh/vi/init.vim	/^nnoremap cp "_ciw<c-r>"<esc>$/;"	m
custom_keycodes	sh/conf/qmk_planckR4keymap.c	/^enum custom_keycodes {$/;"	g	file:
cx	sh/vi/init.vim	/^nnoremap cx s$/;"	m
d.	sh/vi/init.vim	/^nnoremap d. "_dd$/;"	m
d<space>	sh/vi/init.vim	/^nnoremap d<space> :call DelSpace()<Esc>$/;"	m
dX	sh/vi/init.vim	/^nnoremap dX ^"_D$/;"	m
dc	sh/vi/init.vim	/^nnoremap dc "_d\$$/;"	m
delete_buffers	sh/vi/init.vim	/^function! s:delete_buffers(lines)$/;"	f
dip_switch_update_user	sh/conf/qmk_planckR6keymap.c	/^bool dip_switch_update_user(uint8_t index, bool active) {$/;"	f
dip_update	sh/conf/qmk_planckR4keymap.c	/^void dip_update(uint8_t index, bool active) {$/;"	f
dump	sh/conf/ranger/scope.sh	/^dump() { \/bin\/echo "$output"; }$/;"	f
dx	sh/vi/init.vim	/^nnoremap dx 0"_D$/;"	m
easing_function 	sh/vi/init.lua	/^    easing_function = "circular",$/;"	f
encoder_update	sh/conf/qmk_planckR4keymap.c	/^void encoder_update(bool clockwise) {$/;"	f
encoder_update_user	sh/conf/qmk_planckR6keymap.c	/^bool encoder_update_user(uint8_t index, bool clockwise) {$/;"	f
expand 	sh/vi/init.lua	/^        expand = function(args)$/;"	f
fn_actions	sh/conf/qmk_Atreis_keymap.c	/^const uint16_t PROGMEM fn_actions[] = {$/;"	v
fn_actions	sh/conf/qmk_XD60keymap.c	/^const uint16_t PROGMEM fn_actions[] = {$/;"	v
format_buffer	sh/vi/init.vim	/^function! s:format_buffer(b)$/;"	f
frsrt	sh/fehf	/^frsrt() {$/;"	f
g:AutoClosePumvisible	sh/vi/init.vim	/^let g:AutoClosePumvisible = {"ENTER": '', "ESC": ''}$/;"	v
g:GPGPreferSymmetric	sh/vi/init.vim	/^let g:GPGPreferSymmetric=1$/;"	v
g:UltiSnipsSnippetDirectories	sh/vi/init.vim	/^let g:UltiSnipsSnippetDirectories=[$HOME."\/.vim\/ultisnips"]$/;"	v
g:bookmark_no_default_key_mappings	sh/vi/init.vim	/^let g:bookmark_no_default_key_mappings = 0$/;"	v
g:completion_enable_auto_popup	sh/vi/init.vim	/^let g:completion_enable_auto_popup = 1$/;"	v
g:deoplete#enable_at_startup	sh/vi/init.vim	/^let g:deoplete#enable_at_startup = 1$/;"	v
g:floaterm_keymap_new	sh/vi/init.vim	/^let g:floaterm_keymap_new    = '<F7>'$/;"	v
g:floaterm_keymap_next	sh/vi/init.vim	/^let g:floaterm_keymap_next   = '<F9>'$/;"	v
g:floaterm_keymap_prev	sh/vi/init.vim	/^let g:floaterm_keymap_prev   = '<F8>'$/;"	v
g:floaterm_keymap_toggle	sh/vi/init.vim	/^let g:floaterm_keymap_toggle = '<F12>'$/;"	v
g:goyo_height	sh/vi/init.vim	/^let g:goyo_height = "95%"$/;"	v
g:goyo_width	sh/vi/init.vim	/^let g:goyo_width = "66%"$/;"	v
g:lasttab	sh/vi/init.vim	/^    let g:lasttab = 1$/;"	v
g:lightline#colorscheme#deus#palette	sh/vi/stub_theme.vim	/^let g:lightline#colorscheme#deus#palette = lightline#colorscheme#fill(s:p)$/;"	v
g:netrw_altv	sh/vi/init.vim	/^let g:netrw_altv = 1$/;"	v
g:netrw_banner	sh/vi/init.vim	/^let g:netrw_banner = 0$/;"	v
g:netrw_browse_split	sh/vi/init.vim	/^let g:netrw_browse_split = 0$/;"	v
g:netrw_liststyle	sh/vi/init.vim	/^let g:netrw_liststyle = 3$/;"	v
g:netrw_winsize	sh/vi/init.vim	/^let g:netrw_winsize = 25$/;"	v
g:seoul256_background	sh/vi/init.vim	/^let g:seoul256_background = 234$/;"	v
g:sneak#map_netrw	sh/vi/init.vim	/^let g:sneak#map_netrw = 0$/;"	v
g:solarized_termcolors	sh/vi/init.vim	/^let g:solarized_termcolors=256$/;"	v
g:startify_bookmarks	sh/vi/init.vim	/^let g:startify_bookmarks = [ {'s': '~\/.sh'}, '\/ln\/lo\/cur\/' ]$/;"	v
g:startify_files_number	sh/vi/init.vim	/^let g:startify_files_number = 8$/;"	v
g:startify_lists	sh/vi/init.vim	/^let g:startify_lists = [$/;"	v
g:startify_session_dir	sh/vi/init.vim	/^let g:startify_session_dir = $RTP . "\/session"$/;"	v
g:vimplug_available	sh/vi/init.vim	/^    let g:vimplug_available=1$/;"	v
g:vimplug_available	sh/vi/init.vim	/^  let g:vimplug_available=0$/;"	v
g:vimplug_available	sh/vi/init.vim	/^  let g:vimplug_available=1$/;"	v
g:vimplug_available	sh/vi/init.vim	/^let g:vimplug_available=0$/;"	v
g<End>	sh/vi/init.vim	/^nnoremap g<End> G$:call search('^.','b') <CR>0j$/;"	m
g<Home>	sh/vi/init.vim	/^nnoremap g<Home>   gg:call search('^.') <CR>k$/;"	m
g<tab>	sh/vi/init.vim	/^nnoremap g<tab> :exe "tabn ".g:lasttab<CR>$/;"	m
getCmdName	sh/mem.py	/^def getCmdName(pid, split_args):$/;"	f
getMemStats	sh/mem.py	/^def getMemStats(pid):$/;"	f
get_memory_usage	sh/mem.py	/^def get_memory_usage( pids_to_show, split_args, include_self=False, only_self=False ):$/;"	f
get_type	sh/dmenu_recent	/^get_type () {$/;"	f
gn	sh/vi/init.vim	/^nnoremap <silent> gn :call search('^\\(.\\\\|\\(\\s\\)*\\)$','W') <CR>$/;"	m
gn	sh/vi/init.vim	/^onoremap <silent> gn :call search('^\\(.\\\\|\\(\\s\\)*\\)$','W') <CR>$/;"	m
go_through	sh/select-kitty-theme.sh	/^go_through ()$/;"	f
gp	sh/vi/init.vim	/^nnoremap <silent> gp :call search('^\\(.\\\\|\\(\\s\\)*\\)$','bW') <CR>$/;"	m
gp	sh/vi/init.vim	/^onoremap <silent> gp :call search('^\\(.\\\\|\\(\\s\\)*\\)$','bW') <CR>$/;"	m
gr	sh/vi/init.vim	/^nnoremap gr gT$/;"	m
gx	sh/vi/init.vim	/^nnoremap gx dlp$/;"	m
gz	sh/vi/init.vim	/^nnoremap gz 1gt$/;"	m
have_pss	sh/mem.py	/^have_pss = 0$/;"	v
help	sh/mem.py	/^def help():$/;"	f
hotfun.teles_ff 	sh/vi/init.lua	/^hotfun.teles_ff = function()$/;"	f
human	sh/mem.py	/^def human(num, power="Ki", units=None):$/;"	f
jj	sh/vi/init.vim	/^imap jj <ESC>$/;"	m
keep_floating	sh/bspc_rules	/^keep_floating () {$/;"	f
kernel_ver	sh/mem.py	/^def kernel_ver():$/;"	f
key15	sh/vi/init.vim	/^let key15=""$/;"	v
key4	sh/vi/init.vim	/^let key4=""$/;"	v
keymaps	sh/conf/qmk_Atreis_keymap.c	/^const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {$/;"	v
keymaps	sh/conf/qmk_XD60keymap.c	/^const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {$/;"	v
keymaps	sh/conf/qmk_planckR4keymap.c	/^const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {$/;"	v
keymaps	sh/conf/qmk_planckR6keymap.c	/^const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {$/;"	v
last_muse_note	sh/conf/qmk_planckR4keymap.c	/^uint8_t last_muse_note = 0;$/;"	v
last_muse_note	sh/conf/qmk_planckR6keymap.c	/^uint8_t last_muse_note = 0;$/;"	v
layer_state_set_user	sh/conf/qmk_planckR4keymap.c	/^uint32_t layer_state_set_user(uint32_t state) {$/;"	f
layer_state_set_user	sh/conf/qmk_planckR6keymap.c	/^layer_state_t layer_state_set_user(layer_state_t state) {$/;"	f
list_buffers	sh/vi/init.vim	/^function! s:list_buffers()$/;"	f
locatedir	sh/locatedir.sh	/^locatedir () {$/;"	f
m<Down>	sh/vi/init.vim	/^nmap m<Down> <Plug>BookmarkNext$/;"	m
m<Space>	sh/vi/init.vim	/^nmap m<Space> <Plug>BookmarkAnnotate$/;"	m
m<Up>	sh/vi/init.vim	/^nmap m<Up> <Plug>BookmarkPrev$/;"	m
m<bar>	sh/vi/init.vim	/^nmap m<bar> <Plug>BookmarkShowAll$/;"	m
main	sh/mem.py	/^def main():$/;"	f
mapleader	sh/vi/init.vim	/^let mapleader = ","$/;"	v
matrix_init_user	sh/conf/qmk_Atreis_keymap.c	/^void matrix_init_user(void) {$/;"	f
matrix_scan_user	sh/conf/qmk_Atreis_keymap.c	/^void matrix_scan_user(void) {$/;"	f
matrix_scan_user	sh/conf/qmk_XD60keymap.c	/^void matrix_scan_user(void) {$/;"	f
matrix_scan_user	sh/conf/qmk_planckR4keymap.c	/^void matrix_scan_user(void) {$/;"	f
matrix_scan_user	sh/conf/qmk_planckR6keymap.c	/^void matrix_scan_user(void) {$/;"	f
mm	sh/vi/init.vim	/^nmap mm <Plug>BookmarkToggle$/;"	m
muse_counter	sh/conf/qmk_planckR4keymap.c	/^uint16_t muse_counter = 0;$/;"	v
muse_counter	sh/conf/qmk_planckR6keymap.c	/^uint16_t muse_counter = 0;$/;"	v
muse_mode	sh/conf/qmk_planckR4keymap.c	/^bool muse_mode = false;$/;"	v
muse_mode	sh/conf/qmk_planckR6keymap.c	/^bool muse_mode = false;$/;"	v
muse_offset	sh/conf/qmk_planckR4keymap.c	/^uint8_t muse_offset = 70;$/;"	v
muse_offset	sh/conf/qmk_planckR6keymap.c	/^uint8_t muse_offset = 70;$/;"	v
muse_tempo	sh/conf/qmk_planckR4keymap.c	/^uint16_t muse_tempo = 50;$/;"	v
muse_tempo	sh/conf/qmk_planckR6keymap.c	/^uint16_t muse_tempo = 50;$/;"	v
music_mask_user	sh/conf/qmk_planckR4keymap.c	/^bool music_mask_user(uint16_t keycode) {$/;"	f
music_mask_user	sh/conf/qmk_planckR6keymap.c	/^bool music_mask_user(uint16_t keycode) {$/;"	f
my_netrw_mapping	sh/vi/init.vim	/^augroup my_netrw_mapping$/;"	a
n	sh/vi/init.vim	/^nnoremap <silent> n :<C-u>execute "keepjumps norm! " . v:count1 . "nzz"<CR>$/;"	m
nkeymap	sh/vi/init.lua	/^local function nkeymap(a_key, a_map)$/;"	f
nkeymap	sh/vi/nvim-lsp--.lua	/^local function nkeymap(key, map)$/;"	f
open	sh/mem.py	/^    def open(self, *args):$/;"	m	class:Proc
opts.on_attach 	sh/vi/init.lua	/^        opts.on_attach = function() print("ccls attached here!") end$/;"	f
opts.on_attach 	sh/vi/nvim-lsp--.lua	/^        opts.on_attach = function() print("ffg") end$/;"	f
our_pid	sh/mem.py	/^our_pid = os.getpid()$/;"	v
parse_options	sh/mem.py	/^def parse_options():$/;"	f
path	sh/mem.py	/^    def path(self, *args):$/;"	m	class:Proc
planck_keycodes	sh/conf/qmk_planckR4keymap.c	/^enum planck_keycodes {$/;"	g	file:
planck_keycodes	sh/conf/qmk_planckR6keymap.c	/^enum planck_keycodes {$/;"	g	file:
planck_layers	sh/conf/qmk_planckR4keymap.c	/^enum planck_layers {$/;"	g	file:
planck_layers	sh/conf/qmk_planckR6keymap.c	/^enum planck_layers {$/;"	g	file:
plover_gb_song	sh/conf/qmk_planckR4keymap.c	/^  float plover_gb_song[][2]  = SONG(PLOVER_GOODBYE_SOUND);$/;"	v
plover_gb_song	sh/conf/qmk_planckR6keymap.c	/^  float plover_gb_song[][2]  = SONG(PLOVER_GOODBYE_SOUND);$/;"	v
plover_song	sh/conf/qmk_planckR4keymap.c	/^  float plover_song[][2]     = SONG(PLOVER_SOUND);$/;"	v
plover_song	sh/conf/qmk_planckR6keymap.c	/^  float plover_song[][2]     = SONG(PLOVER_SOUND);$/;"	v
print_header	sh/mem.py	/^def print_header():$/;"	f
print_memory_usage	sh/mem.py	/^def print_memory_usage(sorted_cmds, shareds, count, total):$/;"	f
proc	sh/mem.py	/^proc = Proc()$/;"	v
process_record_user	sh/conf/qmk_Atreis_keymap.c	/^bool process_record_user(uint16_t keycode, keyrecord_t *record) {$/;"	f
process_record_user	sh/conf/qmk_planckR4keymap.c	/^bool process_record_user(uint16_t keycode, keyrecord_t *record) {$/;"	f
process_record_user	sh/conf/qmk_planckR6keymap.c	/^bool process_record_user(uint16_t keycode, keyrecord_t *record) {$/;"	f
q	sh/vi/init.vim	/^map q <Nop>$/;"	m
q,	sh/vi/init.vim	/^nnoremap q,    <C-W>6<$/;"	m
q-	sh/vi/init.vim	/^nnoremap q- 60A-<esc>0<esc>60ld$b$/;"	m
q.	sh/vi/init.vim	/^nnoremap q.    <C-W>6>$/;"	m
q/	sh/vi/init.vim	/^nnoremap q\/  :call FocusWindowOrDo('99.txt','1tabn \\| wincmd b \\| e $buf')<CR>$/;"	m
q1	sh/vi/init.vim	/^nnoremap q1 1gt$/;"	m
q2	sh/vi/init.vim	/^nnoremap q2 2gt$/;"	m
q3	sh/vi/init.vim	/^nnoremap q3 3gt$/;"	m
q4	sh/vi/init.vim	/^nnoremap q4 4gt$/;"	m
q5	sh/vi/init.vim	/^nnoremap q5 5gt$/;"	m
q6	sh/vi/init.vim	/^nnoremap q6 6gt$/;"	m
q7	sh/vi/init.vim	/^nnoremap q7 7gt$/;"	m
q8	sh/vi/init.vim	/^nnoremap q8 8gt$/;"	m
q9	sh/vi/init.vim	/^nnoremap q9 9gt$/;"	m
q;	sh/vi/init.vim	/^nnoremap q; :<up>$/;"	m
q;	sh/vi/init.vim	/^vnoremap q; :<up>$/;"	m
q<	sh/vi/init.vim	/^nnoremap q< :call MoveToPrevTab()<CR>$/;"	m
q<BS>	sh/vi/init.vim	/^nnoremap q<BS> :enew<CR>$/;"	m
q<Down>	sh/vi/init.vim	/^nnoremap q<Down> :cnext<CR>$/;"	m
q<Up>	sh/vi/init.vim	/^nnoremap q<Up>   :cprev<CR>$/;"	m
q<tab>	sh/vi/init.vim	/^nnoremap q<tab> <C-w>p$/;"	m
q=	sh/vi/init.vim	/^nnoremap q= 60A=<esc>0<esc>60ld$b$/;"	m
q>	sh/vi/init.vim	/^nnoremap q> :call MoveToNextTab()<CR>$/;"	m
qL	sh/vi/init.vim	/^nnoremap qL :LastToMacro l<CR>$/;"	m
qS	sh/vi/init.vim	/^nnoremap qS :split # <cr>$/;"	m
qV	sh/vi/init.vim	/^nnoremap qV :vsplit # <cr>$/;"	m
q[	sh/vi/init.vim	/^nnoremap q[ gT$/;"	m
q]	sh/vi/init.vim	/^nnoremap q] gt$/;"	m
qa	sh/vi/init.vim	/^nnoremap qa    <C-W>_<C-W>\\|$/;"	m
qb	sh/vi/init.vim	/^nnoremap qb : if isdirectory(expand('%:p:h')) \\| lcd %:p:h \\| endif \\| terminal ++kill=term ++curwin ++norestore <CR>$/;"	m
qd	sh/vi/init.vim	/^nnoremap qd    <C-W>4-$/;"	m
qe	sh/vi/init.vim	/^nnoremap qe    <C-W>4+$/;"	m
qf	sh/vi/init.vim	/^nnoremap qf  :FilesProj<CR>$/;"	m
qg	sh/vi/init.vim	/^nnoremap qg :tabclose<CR>$/;"	m
qh	sh/vi/init.vim	/^nnoremap qh    <C-W>h$/;"	m
qi	sh/vi/init.vim	/^nnoremap qi O<Esc>$/;"	m
qj	sh/vi/init.vim	/^nnoremap qj    <C-W>j$/;"	m
qk	sh/vi/init.vim	/^nnoremap qk    <C-W>k$/;"	m
ql	sh/vi/init.vim	/^nnoremap ql    <C-W>l$/;"	m
qm	sh/vi/init.vim	/^nnoremap qm @$/;"	m
qo	sh/vi/init.vim	/^nnoremap qo o<Esc>$/;"	m
qq	sh/vi/init.vim	/^nnoremap qq :$/;"	m
qr	sh/vi/init.vim	/^nnoremap qr @@$/;"	m
qs	sh/vi/init.vim	/^nnoremap qs :new  \\| lcd #:p:h \\| echo expand ('%') '.@.' getcwd() <CR>$/;"	m
qt	sh/vi/init.vim	/^nnoremap qt :call GotoTerm(0)<CR>$/;"	m
qu	sh/vi/init.vim	/^nnoremap qu ~$/;"	m
qv	sh/vi/init.vim	/^nnoremap qv :vnew \\| lcd #:p:h \\| echo expand ('%') '.@.' getcwd() <CR>$/;"	m
qx	sh/vi/init.vim	/^nnoremap qx :q<CR>$/;"	m
qy	sh/vi/init.vim	/^nnoremap qy :let @+ = @" <bar> :let @* = @" <CR>$/;"	m
qz	sh/vi/init.vim	/^nnoremap qz    <C-W>=$/;"	m
q{	sh/vi/init.vim	/^nnoremap q{ :tabmove -1 <CR>$/;"	m
q}	sh/vi/init.vim	/^nnoremap q} :tabmove +1 <CR>$/;"	m
read_key	sh/bootstrap	/^read_key() {$/;"	f
s:p	sh/vi/stub_theme.vim	/^let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {}}$/;"	v
s:p	sh/vi/stub_theme.vim	/^let s:p.inactive.left = [ [ s:term_paper, s:term_blacke ] ]$/;"	v
s:p	sh/vi/stub_theme.vim	/^let s:p.inactive.right = [ [ '#292c33', '#61afef', s:term_white, s:term_black], [ '#abb2bf', '#3e4452', s:term_paper, s:term_grey ] ]$/;"	v
s:p	sh/vi/stub_theme.vim	/^let s:p.insert.left = [ [ '#292c33', '#61afef', s:term_black, s:term_yellow, 'bold' ], [ '#61afef', '#292c33', s:term_yellow, s:term_black ] ]$/;"	v
s:p	sh/vi/stub_theme.vim	/^let s:p.insert.middle = s:p.normal.middle$/;"	v
s:p	sh/vi/stub_theme.vim	/^let s:p.insert.right = [ s:p.normal.right[0], s:p.normal.right[1], [ '#61afef', '#292c33', s:term_yellow, s:term_black ] ]$/;"	v
s:p	sh/vi/stub_theme.vim	/^let s:p.normal.error = [ [ '#292c33', '#e06c75', s:term_black, s:term_red ] ]$/;"	v
s:p	sh/vi/stub_theme.vim	/^let s:p.normal.left = [ [ '#292c33', '#98c379', s:term_black, s:term_green, 'bold' ], [ '#98c379', '#292c33', s:term_green, s:term_black ] ]$/;"	v
s:p	sh/vi/stub_theme.vim	/^let s:p.normal.middle = [ [ '#abb2bf', '#292c33', s:term_white, s:term_black ] ]$/;"	v
s:p	sh/vi/stub_theme.vim	/^let s:p.normal.right = [ [ '#292c33', '#98c379', s:term_white, s:term_black ], [ '#abb2bf', '#3e4452', s:term_white, s:term_grey ], [ '#f8c379', '#f92c33', s:term_green, s:term_black ] ]$/;"	v
s:p	sh/vi/stub_theme.vim	/^let s:p.normal.warning = [ [ '#292c33', '#e5c07b', s:term_black, s:term_yellow ] ]$/;"	v
s:p	sh/vi/stub_theme.vim	/^let s:p.replace.left = [ [ '#111111', '#E11527', 'bold' ], [ '#e06c75', '#292c33', s:term_yellow, s:term_black ] ]$/;"	v
s:p	sh/vi/stub_theme.vim	/^let s:p.replace.middle = s:p.normal.middle$/;"	v
s:p	sh/vi/stub_theme.vim	/^let s:p.replace.right = [ s:p.normal.right[0], s:p.normal.right[1], [ '#e06c75', '#292c33', s:term_yellow, s:term_black ] ]$/;"	v
s:p	sh/vi/stub_theme.vim	/^let s:p.tabline.left = [ s:p.normal.left[1] ]$/;"	v
s:p	sh/vi/stub_theme.vim	/^let s:p.tabline.middle = s:p.normal.middle$/;"	v
s:p	sh/vi/stub_theme.vim	/^let s:p.tabline.right = [ s:p.normal.left[1] ]$/;"	v
s:p	sh/vi/stub_theme.vim	/^let s:p.tabline.tabsel = [ s:p.normal.left[0] ]$/;"	v
s:p	sh/vi/stub_theme.vim	/^let s:p.visual.left = [ [ '#292c33', '#c678dd', s:term_black, s:term_purple, 'bold' ], [ '#c678dd', '#292c33', s:term_purple, s:term_black ] ]$/;"	v
s:p	sh/vi/stub_theme.vim	/^let s:p.visual.right = [ s:p.normal.right[0], s:p.normal.right[1], [ '#c678dd', '#292c33', s:term_purple, s:term_black ] ]$/;"	v
s:term_black	sh/vi/stub_theme.vim	/^let s:term_black = 235$/;"	v
s:term_blacke	sh/vi/stub_theme.vim	/^let s:term_blacke = 234$/;"	v
s:term_blacker	sh/vi/stub_theme.vim	/^let s:term_blacker = 233$/;"	v
s:term_blue	sh/vi/stub_theme.vim	/^let s:term_blue = 32$/;"	v
s:term_green	sh/vi/stub_theme.vim	/^let s:term_green = 78$/;"	v
s:term_grey	sh/vi/stub_theme.vim	/^let s:term_grey = 236$/;"	v
s:term_paper	sh/vi/stub_theme.vim	/^let s:term_paper = 229$/;"	v
s:term_purple	sh/vi/stub_theme.vim	/^let s:term_purple = 135$/;"	v
s:term_red	sh/vi/stub_theme.vim	/^let s:term_red = 124$/;"	v
s:term_white	sh/vi/stub_theme.vim	/^let s:term_white = 145$/;"	v
s:term_yellow	sh/vi/stub_theme.vim	/^let s:term_yellow = 180$/;"	v
safepipe	sh/conf/ranger/scope.sh	/^safepipe() { "$@"; test $? = 0 -o $? = 141; }$/;"	f
scrollpart	sh/vi/init.vim	/^let scrollpart=82$/;"	v
select.label_maker 	sh/conf/luakit/userconf.lua	/^select.label_maker = function ()$/;"	f
shared_val_accuracy	sh/mem.py	/^def shared_val_accuracy():$/;"	f
show_shared_val_accuracy	sh/mem.py	/^def show_shared_val_accuracy( possible_inacc, only_total=False ):$/;"	f
std_exceptions	sh/mem.py	/^def std_exceptions(etype, value, tb):$/;"	f
title	sh/trmcli.sh	/^title() { echo -ne "\\033]0;$*\\007"; }$/;"	f
trim	sh/conf/ranger/scope.sh	/^trim() { head -n "$maxln"; }$/;"	f
try	sh/conf/ranger/scope.sh	/^try() { output=$(eval '"$@"'); }$/;"	f
verify_environment	sh/mem.py	/^def verify_environment():$/;"	f
w) luakit.spawn	sh/conf/luakit/userconf.lua	/^    { "ac", "Open in chrome", function(w) luakit.spawn(string.format("chromium %s", w.view.uri)) end },$/;"	f
w) w:navigate	sh/conf/luakit/userconf.lua	/^        function(w) w:navigate("luakit:\/\/bookmarks\/") end },$/;"	f
w) w:run_cmd	sh/conf/luakit/userconf.lua	/^    { "ad", "Downloads", function(w) w:run_cmd(":downloads") end },$/;"	f
w,m) w:back	sh/conf/luakit/userconf.lua	/^    { "ab", "Go back", function(w,m) w:back() end },$/;"	f
w,m) w:forward	sh/conf/luakit/userconf.lua	/^    { "af", "Go forward", function(w,m) w:forward() end },$/;"	f
x	sh/vi/init.vim	/^noremap x "_x$/;"	m
xterm16_brightness	sh/vi/init.vim	/^let xterm16_brightness = '#aac8c2' | let xterm16_colormap='soft'$/;"	v
y<tab>	sh/vi/init.vim	/^nnoremap y<tab> :let @" = expand('%:p')$/;"	m
yc	sh/vi/init.vim	/^nnoremap yc ^y$"+y$"*y\$$/;"	m
yq	sh/vi/init.vim	/^nnoremap yq :@"<CR>$/;"	m
z;	sh/vi/init.vim	/^nnoremap z; :set wrap!<CR>$/;"	m
z<BS>	sh/vi/init.vim	/^nnoremap z<BS> :e!<CR>$/;"	m
z<space>	sh/vi/init.vim	/^nnoremap z<space> :set filetype=text<CR>$/;"	m
{	sh/vi/init.vim	/^nnoremap <silent> { :<C-u>execute "keepjumps norm! " . v:count1 . "{zz"<CR>$/;"	m
{ "<BackSpace>", "Scroll golden up", function(w) w:scroll{ ypagerel 	sh/conf/luakit/userconf.lua	/^    { "<BackSpace>", "Scroll golden up", function(w) w:scroll{ ypagerel =  -0.78 } end },$/;"	f
{ "<Control-j>", "Scroll down a bit", function (w) w:scroll{ yrel 	sh/conf/luakit/userconf.lua	/^    { "<Control-j>", "Scroll down a bit", function (w) w:scroll{ yrel = 15 } end },$/;"	f
{ "<Control-k>", "Scroll up a bit", function (w) w:scroll{ yrel 	sh/conf/luakit/userconf.lua	/^    { "<Control-k>", "Scroll up a bit", function (w) w:scroll{ yrel = -15 } end },$/;"	f
{ "<space>", "Scroll golden down", function(w) w:scroll{ ypagerel 	sh/conf/luakit/userconf.lua	/^    { "<space>", "Scroll golden down", function(w) w:scroll{ ypagerel =  0.78 } end },$/;"	f
{ "^at$", "New Tab", function(w) w:new_tab({uri 	sh/conf/luakit/userconf.lua	/^    { "^at$", "New Tab", function(w) w:new_tab({uri = "luakit:\/\/newtab\/"}, {order = taborder.after_current}) end },$/;"	f
{ "d", "Scroll golden down", function(w) w:scroll{ ypagerel 	sh/conf/luakit/userconf.lua	/^    { "d", "Scroll golden down", function(w) w:scroll{ ypagerel =  0.78 } end },$/;"	f
{ "e", "Scroll golden up", function(w) w:scroll{ ypagerel 	sh/conf/luakit/userconf.lua	/^    { "e", "Scroll golden up", function(w) w:scroll{ ypagerel =  -0.78 } end },$/;"	f
{ "s", "Scroll", function(w,m) w:scroll{ yrel 	sh/conf/luakit/userconf.lua	/^    { "s", "Scroll", function(w,m) w:scroll{ yrel = settings.get_setting("window.scroll_step")*(m.count or 1) } end },$/;"	f
{ "w", "Scrollup", function(w,m) w:scroll{ yrel 	sh/conf/luakit/userconf.lua	/^    { "w", "Scrollup", function(w,m) w:scroll{ yrel = -settings.get_setting("window.scroll_step")*(m.count or 1) } end },$/;"	f
{ "x", "Close tab(s)", function(w,m) for _	sh/conf/luakit/userconf.lua	/^    { "x", "Close tab(s)", function(w,m) for _=1,m.count do w:close_tab() end end, {count=1} },$/;"	f
}	sh/vi/init.vim	/^nnoremap <silent> } :<C-u>execute "keepjumps norm! " . v:count1 . "}zz"<CR>$/;"	m
й	sh/vi/init.vim	/^map й q$/;"	m
оо	sh/vi/init.vim	/^imap оо <ESC>$/;"	m
ф	sh/vi/init.vim	/^map ф a$/;"	m
